[
  {
    "slug": "compilando-ruby-com-rails-3-no-uol-cloud",
    "media": {
      "images": [],
      "videos": [],
      "audio_files": []
    },
    "number_of_comments": 0,
    "twitter_account": "lucasts",
    "post_image_115": null,
    "post_image_500": null,
    "draft": false,
    "tags": [],
    "title": "Compilando Ruby com Rails 3 no UOL Cloud",
    "body_full": "<p>Depois que o UOL Cloud saiu da fase de testes, estranhamente não é\nmais permitido o uso do ubuntu, mesmo que LTS.\nSem opção, temos de usar o CentOS.</p>\n\n<p>Otima distribuição baseada no Red Hat Enterprise, mas que no que tange\na ruby, dispoe versões antigas.</p>\n\n<p>Alguns tutoriais em ingles existem na web, mas acredito que algo\nespecifico para este ambiente novo e material em portugues é sempre\nbem vindo.</p>\n\n<h2>Passo 1: Limpando o ambiente</h2>\n\n<p>Antes de instalar qualquer coisa, verificamos se não existe alguma\nversão antiga do ruby.</p>\n\n<p>Tente</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># ruby -v</pre></div>\n</div>\n\n\n<p>Se o comando funcionar, deve listar a versão 1.8.6.</p>\n\n<p>Vamos verificar os pacotes ruby instalados e remove-los</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># rpm -qa |grep ruby</pre></div>\n</div>\n\n\n<p>Este comando lista pacotes ruby instalados.\nRemova os pacotes com o comando</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># rpm -e PACOTE</pre></div>\n</div>\n\n\n<h2>Passo 2: Preparando o ambiente</h2>\n\n<p>Vamos instalar bibliotecas e software basico para compilação.\nPara isso utilizamos o yum:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># yum groupinstall &quot;Development Tools&quot;</pre></div>\n</div>\n\n\n<p>Este comando instala uma serie de dependencias para compilação no CentOS</p>\n\n<p>Depois, vamos baixar o código fonte ruby, na data de hoje, outubro de\n2010, 1.9.2</p>\n\n<p>Primeiro, vamos para o diretorio padrao para código fonte</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># cd /usr/local/src</pre></div>\n</div>\n\n\n<p>e baixamos o fonte ruby</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># wget ftp://ftp.ruby-lang.org:21//pub/ruby/1.9/ruby-1.9.2-p0.tar.gz</pre></div>\n</div>\n\n\n<p>descompactamos</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># tar xvf ruby-1.9.2-p0.tar.gz\n# cd ruby-1.9.2-p0</pre></div>\n</div>\n\n\n<h2>Passo 3: Compilando</h2>\n\n<p>Aqui é o processo familiar para que compila no linux</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># ./configure\n# make\n# make install</pre></div>\n</div>\n\n\n<p>No configure, voce pode se deparar com alguma lib faltando, pesquise\npor ela com o <code>yum search</code> e instale o que falta, apenas lembre-se de\nsempre instalar a versão devel. Exemplo: se faltar a lib curl no\nconfigure, instale a versão que acaba com devel (curl-devel)</p>\n\n<p>Verifique então a versão ruby instalada:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># ruby -v\nruby 1.9.2p0 (2010-08-18 revision 29036) [i686-linux]</pre></div>\n</div>\n\n\n<h2>Passo 4: Ambiente Rails</h2>\n\n<p>Antes de instalar o rails, atualizamos a gem por descargo de consciencia</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem update --system\nUpdating RubyGems\nNothing to update\n# gem -v\n1.3.7</pre></div>\n</div>\n\n\n<p>Ou seja, ja estamos na ultima versão, 1.3.7</p>\n\n<p>Podemos assim, instalar o rails:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem install rails</pre></div>\n</div>\n\n\n<p>Isso deve demorar um pouco, senão quiser gerar documentação RI e RDOC,\ncoloque os paramentros <code>--no-ri e --no-rdoc</code></p>\n\n<p>Para fazer testes e aplicações basicas, precisamos do sqlite,\nutilizado como banco de dados padrão</p>\n\n<p>Infelizmente o CentOS não dispoe da versão necessaria para a\ncompilação dos bindinds sqlite3 para ruby, por isso precisamos baixar\ne compilar o sqlite.</p>\n\n<p>Voltamos ao diretório <code>/usr/local/src</code></p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># cd /usr/local/src</pre></div>\n</div>\n\n\n<p>e baixamos o código fonte do sqlite e fazemos o procedimento padão de\ncompilação novamente</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># wget http://www.sqlite.org/sqlite-amalgamation-3.7.3.tar.gz\n# tar xvf sqlite-amalgamation-3.7.3.tar.gz\n# cd sqlite-3.7.3\n# ./configure\n# make &amp;&amp; make install</pre></div>\n</div>\n\n\n<p>Assim, ja podemos instalar o sqlite3-ruby</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem install sqlite3-ruby</pre></div>\n</div>\n\n\n<p>Tudo certo, podemos verificar a versão do Rails:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># rails -v\nRails 3.0.1</pre></div>\n</div>\n\n\n<p>Assim montamos um ambiente base, para teste de aplicações no que seria\no servidor de produçao.</p>\n\n<p>Para um próximo artigo, podemos incluir a instalação do novo\n<a href=\"http://www.modrails.com/\">Passenger</a>, o 3.0 com o nginx para tornar\neste servidor digno para responder requisições reais.</p>",
    "user": {
      "nickname": "lucas-ts",
      "lastname": "Stephanou",
      "body": "A web developer",
      "last_activity": "2012/04/11 23:06:07 -0700",
      "profile_url": "http://posterous.com/users/4SyfnfuUwEqR",
      "profile_pic": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "firstname": "Lucas",
      "display_name": "Lucas Stephanou",
      "id": 711389,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg"
    },
    "current_member": "admin",
    "comments_count": 0,
    "site_id": 1887605,
    "is_private": false,
    "display_date": "2010/10/28 10:58:36 -0700",
    "author_display_name": "Lucas Stephanou",
    "is_owned_by_current_user": true,
    "body_html": "<p>Depois que o UOL Cloud saiu da fase de testes, estranhamente não é\nmais permitido o uso do ubuntu, mesmo que LTS.\nSem opção, temos de usar o CentOS.</p>\n\n<p>Otima distribuição baseada no Red Hat Enterprise, mas que no que tange\na ruby, dispoe versões antigas.</p>\n\n<p>Alguns tutoriais em ingles existem na web, mas acredito que algo\nespecifico para este ambiente novo e material em portugues é sempre\nbem vindo.</p>\n\n<h2>Passo 1: Limpando o ambiente</h2>\n\n<p>Antes de instalar qualquer coisa, verificamos se não existe alguma\nversão antiga do ruby.</p>\n\n<p>Tente</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># ruby -v</pre></div>\n</div>\n\n\n<p>Se o comando funcionar, deve listar a versão 1.8.6.</p>\n\n<p>Vamos verificar os pacotes ruby instalados e remove-los</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># rpm -qa |grep ruby</pre></div>\n</div>\n\n\n<p>Este comando lista pacotes ruby instalados.\nRemova os pacotes com o comando</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># rpm -e PACOTE</pre></div>\n</div>\n\n\n<h2>Passo 2: Preparando o ambiente</h2>\n\n<p>Vamos instalar bibliotecas e software basico para compilação.\nPara isso utilizamos o yum:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># yum groupinstall &quot;Development Tools&quot;</pre></div>\n</div>\n\n\n<p>Este comando instala uma serie de dependencias para compilação no CentOS</p>\n\n<p>Depois, vamos baixar o código fonte ruby, na data de hoje, outubro de\n2010, 1.9.2</p>\n\n<p>Primeiro, vamos para o diretorio padrao para código fonte</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># cd /usr/local/src</pre></div>\n</div>\n\n\n<p>e baixamos o fonte ruby</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># wget ftp://ftp.ruby-lang.org:21//pub/ruby/1.9/ruby-1.9.2-p0.tar.gz</pre></div>\n</div>\n\n\n<p>descompactamos</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># tar xvf ruby-1.9.2-p0.tar.gz\n# cd ruby-1.9.2-p0</pre></div>\n</div>\n\n\n<h2>Passo 3: Compilando</h2>\n\n<p>Aqui é o processo familiar para que compila no linux</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># ./configure\n# make\n# make install</pre></div>\n</div>\n\n\n<p>No configure, voce pode se deparar com alguma lib faltando, pesquise\npor ela com o <code>yum search</code> e instale o que falta, apenas lembre-se de\nsempre instalar a versão devel. Exemplo: se faltar a lib curl no\nconfigure, instale a versão que acaba com devel (curl-devel)</p>\n\n<p>Verifique então a versão ruby instalada:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># ruby -v\nruby 1.9.2p0 (2010-08-18 revision 29036) [i686-linux]</pre></div>\n</div>\n\n\n<h2>Passo 4: Ambiente Rails</h2>\n\n<p>Antes de instalar o rails, atualizamos a gem por descargo de consciencia</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem update --system\nUpdating RubyGems\nNothing to update\n# gem -v\n1.3.7</pre></div>\n</div>\n\n\n<p>Ou seja, ja estamos na ultima versão, 1.3.7</p>\n\n<p>Podemos assim, instalar o rails:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem install rails</pre></div>\n</div>\n\n\n<p>Isso deve demorar um pouco, senão quiser gerar documentação RI e RDOC,\ncoloque os paramentros <code>--no-ri e --no-rdoc</code></p>\n\n<p>Para fazer testes e aplicações basicas, precisamos do sqlite,\nutilizado como banco de dados padrão</p>\n\n<p>Infelizmente o CentOS não dispoe da versão necessaria para a\ncompilação dos bindinds sqlite3 para ruby, por isso precisamos baixar\ne compilar o sqlite.</p>\n\n<p>Voltamos ao diretório <code>/usr/local/src</code></p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># cd /usr/local/src</pre></div>\n</div>\n\n\n<p>e baixamos o código fonte do sqlite e fazemos o procedimento padão de\ncompilação novamente</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># wget http://www.sqlite.org/sqlite-amalgamation-3.7.3.tar.gz\n# tar xvf sqlite-amalgamation-3.7.3.tar.gz\n# cd sqlite-3.7.3\n# ./configure\n# make &amp;&amp; make install</pre></div>\n</div>\n\n\n<p>Assim, ja podemos instalar o sqlite3-ruby</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem install sqlite3-ruby</pre></div>\n</div>\n\n\n<p>Tudo certo, podemos verificar a versão do Rails:</p>\n\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre># rails -v\nRails 3.0.1</pre></div>\n</div>\n\n\n<p>Assim montamos um ambiente base, para teste de aplicações no que seria\no servidor de produçao.</p>\n\n<p>Para um próximo artigo, podemos incluir a instalação do novo\n<a href=\"http://www.modrails.com/\">Passenger</a>, o 3.0 com o nginx para tornar\neste servidor digno para responder requisições reais.</p>",
    "full_url": "http://blog.lucas-ts.com/compilando-ruby-com-rails-3-no-uol-cloud",
    "privatestring": "cpeqGIpzci",
    "body_excerpt": "Depois que o UOL Cloud saiu da fase de testes, estranhamente não é mais permitido o uso do ubuntu, mesmo que LTS. Sem opção, temos de usar o CentOS. Otima distribuição baseada no Red Hat Enterprise, mas que no que tange a ruby, dispoe versões anti...",
    "likes_count": 0,
    "views_count": 5892,
    "site": {
      "comment_permission": 2,
      "header_image": null,
      "current_user_role": "admin",
      "profile_image_75": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "subhead": "Thoughts from a web developer",
      "current_user_notification_frequency": "immediately",
      "posts_count": 2,
      "full_hostname": "blog.lucas-ts.com",
      "is_private": false,
      "is_group": false,
      "sharing_enabled": true,
      "name": "Lucas Stephanou ",
      "hostname": "lucasts",
      "id": 1887605,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg",
      "time_zone": "Brasilia"
    },
    "locations": [],
    "current_user_likes_post": false,
    "body_cleaned": "<p>Depois que o UOL Cloud saiu da fase de testes, estranhamente não é\nmais permitido o uso do ubuntu, mesmo que LTS.\nSem opção, temos de usar o CentOS.</p></p><p><p>Otima distribuição baseada no Red Hat Enterprise, mas que no que tange\na ruby, dispoe versões antigas.</p></p><p><p>Alguns tutoriais em ingles existem na web, mas acredito que algo\nespecifico para este ambiente novo e material em portugues é sempre\nbem vindo.</p></p><p>Passo 1: Limpando o ambiente </p><p><p>Antes de instalar qualquer coisa, verificamos se não existe alguma\nversão antiga do ruby.</p></p><p><p>Tente</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># ruby -v</pre></div>\n</div></p><p><p>Se o comando funcionar, deve listar a versão 1.8.6.</p></p><p><p>Vamos verificar os pacotes ruby instalados e remove-los</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># rpm -qa |grep ruby</pre></div>\n</div></p><p><p>Este comando lista pacotes ruby instalados.\nRemova os pacotes com o comando</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># rpm -e PACOTE</pre></div>\n</div></p><p>Passo 2: Preparando o ambiente </p><p><p>Vamos instalar bibliotecas e software basico para compilação.\nPara isso utilizamos o yum:</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># yum groupinstall \"Development Tools\"</pre></div>\n</div></p><p><p>Este comando instala uma serie de dependencias para compilação no CentOS</p></p><p><p>Depois, vamos baixar o código fonte ruby, na data de hoje, outubro de\n2010, 1.9.2</p></p><p><p>Primeiro, vamos para o diretorio padrao para código fonte</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># cd /usr/local/src</pre></div>\n</div></p><p><p>e baixamos o fonte ruby</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># wget ftp://ftp.ruby-lang.org:21//pub/ruby/1.9/ruby-1.9.2-p0.tar.gz</pre></div>\n</div></p><p><p>descompactamos</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># tar xvf ruby-1.9.2-p0.tar.gz\n# cd ruby-1.9.2-p0</pre></div>\n</div></p><p>Passo 3: Compilando </p><p><p>Aqui é o processo familiar para que compila no linux</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># ./configure\n# make\n# make install</pre></div>\n</div></p><p><p>No configure, voce pode se deparar com alguma lib faltando, pesquise\npor ela com o <code>yum search</code> e instale o que falta, apenas lembre-se de\nsempre instalar a versão devel. Exemplo: se faltar a lib curl no\nconfigure, instale a versão que acaba com devel (curl-devel)</p></p><p><p>Verifique então a versão ruby instalada:</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># ruby -v\nruby 1.9.2p0 (2010-08-18 revision 29036) [i686-linux]</pre></div>\n</div></p><p>Passo 4: Ambiente Rails </p><p><p>Antes de instalar o rails, atualizamos a gem por descargo de consciencia</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem update --system\nUpdating RubyGems\nNothing to update\n# gem -v\n1.3.7</pre></div>\n</div></p><p><p>Ou seja, ja estamos na ultima versão, 1.3.7</p></p><p><p>Podemos assim, instalar o rails:</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem install rails</pre></div>\n</div></p><p><p>Isso deve demorar um pouco, senão quiser gerar documentação RI e RDOC,\ncoloque os paramentros <code>--no-ri e --no-rdoc</code></p></p><p><p>Para fazer testes e aplicações basicas, precisamos do sqlite,\nutilizado como banco de dados padrão</p></p><p><p>Infelizmente o CentOS não dispoe da versão necessaria para a\ncompilação dos bindinds sqlite3 para ruby, por isso precisamos baixar\ne compilar o sqlite.</p></p><p><p>Voltamos ao diretório <code>/usr/local/src</code></p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># cd /usr/local/src</pre></div>\n</div></p><p><p>e baixamos o código fonte do sqlite e fazemos o procedimento padão de\ncompilação novamente</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># wget <a href=\"http://www.sqlite.org/sqlite-amalgamation-3.7.3.tar.gz\">http://www.sqlite.org/sqlite-amalgamation-3.7.3.tar.gz</a>\n# tar xvf sqlite-amalgamation-3.7.3.tar.gz\n# cd sqlite-3.7.3\n# ./configure\n# make &amp;&amp; make install</pre></div>\n</div></p><p><p>Assim, ja podemos instalar o sqlite3-ruby</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># gem install sqlite3-ruby</pre></div>\n</div></p><p><p>Tudo certo, podemos verificar a versão do Rails:</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre># rails -v\nRails 3.0.1</pre></div>\n</div></p><p><p>Assim montamos um ambiente base, para teste de aplicações no que seria\no servidor de produçao.</p></p><p><p>Para um próximo artigo, podemos incluir a instalação do novo\n<a href=\"http://www.modrails.com/\" rel=\"nofollow\">Passenger</a>, o 3.0 com o nginx para tornar\neste servidor digno para responder requisições reais.</p>",
    "allowed": true,
    "replies_count": 0,
    "scheduled": false,
    "id": 31830250,
    "short_url": "http://post.ly/17u7W"
  },
  {
    "slug": "mudando-a-default-culture-no-symfony-12-13-e",
    "media": {
      "images": [],
      "videos": [],
      "audio_files": []
    },
    "number_of_comments": 0,
    "twitter_account": "lucasts",
    "post_image_115": null,
    "post_image_500": null,
    "draft": false,
    "tags": [
      {
        "name": "culture",
        "id": 18035694
      },
      {
        "name": "php",
        "id": 18035693
      },
      {
        "name": "symfony",
        "id": 18035692
      }
    ],
    "title": "Mudando a Default Culture no Symfony 1.2, 1.3 e 1.4 [pt]",
    "body_full": "\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px;\">This post are available in english too. <a href=\"http://blog.lucas-ts.com/default-culture-in-symfony-12-13-and-14-en\" target=\"_self\">Click here</a></p>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px;\">Este blog tamb&eacute;m esta dispon&iacute;vel em portugu&ecirc;s, clique aqui!</p>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 18px; margin-left: 0px; padding: 0px;\">Uma pequena dica que pode salvar seu dia, como salvou de uma amigo.<br />Recebi uma pergunta de porque o symfony n&atilde;o estava alterando a culture, mesmo ap&oacute;s inserir uma nova no arquivo settings.yml&nbsp;</p>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 18px; margin-left: 0px; padding: 0px;\">Normalmente ao trocar a culture padr&atilde;o para pt_BR, o arquivo &nbsp;vai ficar mais ou menos assim</p>\r\n<div class=\"CodeRay\" style=\"margin-top: 12px; margin-right: 0px; margin-bottom: 20px; margin-left: 0px; padding-top: 3px; padding-right: 5px; padding-bottom: 3px; padding-left: 5px; background-color: #232323; font-family: Courier New, Terminal, monospace; color: #e6e0db; font-size: 12px; line-height: 14px; border: 1px solid black;\">\r\n<div class=\"code\" style=\"padding: 0px; margin: 0px;\">\r\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>all:\n  .settings:\n    default_culture: pt_BR</pre></div>\n</div>\n\r\n</div>\r\n</div>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 18px; margin-left: 0px; padding: 0px;\">Ent&atilde;o voc&euml; atualiza a pagina, limpa o cache do symfony e nada parece mudar.</p>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 18px; margin-left: 0px; padding: 0px;\">O problema ocorre porque o symfony guarda a informa&ccedil;&atilde;o da culture preferencial em um cookie, logo na primeira requisi&ccedil;&atilde;o. Logo, se n&atilde;o limpar os cookies( e cache) a nova configura&ccedil;&atilde;o de culture n&atilde;o vai fazer efeito at&eacute; os cookies vencerem</p>\r\n<p />\r\n<p>&nbsp;</p>",
    "user": {
      "nickname": "lucas-ts",
      "lastname": "Stephanou",
      "body": "A web developer",
      "last_activity": "2012/04/11 23:06:07 -0700",
      "profile_url": "http://posterous.com/users/4SyfnfuUwEqR",
      "profile_pic": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "firstname": "Lucas",
      "display_name": "Lucas Stephanou",
      "id": 711389,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg"
    },
    "current_member": "admin",
    "comments_count": 0,
    "site_id": 1887605,
    "is_private": false,
    "display_date": "2010/09/30 07:20:00 -0700",
    "author_display_name": "Lucas Stephanou",
    "is_owned_by_current_user": true,
    "body_html": "\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px;\">This post are available in english too. <a href=\"http://blog.lucas-ts.com/default-culture-in-symfony-12-13-and-14-en\" target=\"_self\">Click here</a></p>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px;\">Este blog tamb&eacute;m esta dispon&iacute;vel em portugu&ecirc;s, clique aqui!</p>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 18px; margin-left: 0px; padding: 0px;\">Uma pequena dica que pode salvar seu dia, como salvou de uma amigo.<br />Recebi uma pergunta de porque o symfony n&atilde;o estava alterando a culture, mesmo ap&oacute;s inserir uma nova no arquivo settings.yml&nbsp;</p>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 18px; margin-left: 0px; padding: 0px;\">Normalmente ao trocar a culture padr&atilde;o para pt_BR, o arquivo &nbsp;vai ficar mais ou menos assim</p>\r\n<div class=\"CodeRay\" style=\"margin-top: 12px; margin-right: 0px; margin-bottom: 20px; margin-left: 0px; padding-top: 3px; padding-right: 5px; padding-bottom: 3px; padding-left: 5px; background-color: #232323; font-family: Courier New, Terminal, monospace; color: #e6e0db; font-size: 12px; line-height: 14px; border: 1px solid black;\">\r\n<div class=\"code\" style=\"padding: 0px; margin: 0px;\">\r\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>all:\n  .settings:\n    default_culture: pt_BR</pre></div>\n</div>\n\r\n</div>\r\n</div>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 18px; margin-left: 0px; padding: 0px;\">Ent&atilde;o voc&euml; atualiza a pagina, limpa o cache do symfony e nada parece mudar.</p>\r\n<p style=\"margin-top: 15px; margin-right: 0px; margin-bottom: 18px; margin-left: 0px; padding: 0px;\">O problema ocorre porque o symfony guarda a informa&ccedil;&atilde;o da culture preferencial em um cookie, logo na primeira requisi&ccedil;&atilde;o. Logo, se n&atilde;o limpar os cookies( e cache) a nova configura&ccedil;&atilde;o de culture n&atilde;o vai fazer efeito at&eacute; os cookies vencerem</p>\r\n<p />\r\n<p>&nbsp;</p>",
    "full_url": "http://blog.lucas-ts.com/mudando-a-default-culture-no-symfony-12-13-e",
    "privatestring": "AHrpzGAwnp",
    "body_excerpt": "This post are available in english too. Click here Este blog também esta disponível em português, clique aqui! Uma pequena dica que pode salvar seu dia, como salvou de uma amigo.Recebi uma pergunta de porque o symfony não estava alterando a cultur...",
    "likes_count": 0,
    "views_count": 6023,
    "site": {
      "comment_permission": 2,
      "header_image": null,
      "current_user_role": "admin",
      "profile_image_75": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "subhead": "Thoughts from a web developer",
      "current_user_notification_frequency": "immediately",
      "posts_count": 2,
      "full_hostname": "blog.lucas-ts.com",
      "is_private": false,
      "is_group": false,
      "sharing_enabled": true,
      "name": "Lucas Stephanou ",
      "hostname": "lucasts",
      "id": 1887605,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg",
      "time_zone": "Brasilia"
    },
    "locations": [],
    "current_user_likes_post": false,
    "body_cleaned": "<p>This post are available in english too. <a href=\"http://blog.lucas-ts.com/default-culture-in-symfony-12-13-and-14-en\" rel=\"nofollow\">Click here</a></p>\n<p>Este blog também esta disponível em português, clique aqui!</p>\n<p>Uma pequena dica que pode salvar seu dia, como salvou de uma amigo.<br />Recebi uma pergunta de porque o symfony não estava alterando a culture, mesmo após inserir uma nova no arquivo settings.yml </p>\n<p>Normalmente ao trocar a culture padrão para pt_BR, o arquivo  vai ficar mais ou menos assim</p>\n<div class=\"CodeRay\">\n<div class=\"code\">\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>all:\n  .settings:\n    default_culture: pt_BR</pre></div>\n</div></p><p></div>\n</div>\n<p>Então vocë atualiza a pagina, limpa o cache do symfony e nada parece mudar.</p>\n<p>O problema ocorre porque o symfony guarda a informação da culture preferencial em um cookie, logo na primeira requisição. Logo, se não limpar os cookies( e cache) a nova configuração de culture não vai fazer efeito até os cookies vencerem</p>\n<div> </div>\n<p> </p>",
    "allowed": true,
    "replies_count": 0,
    "scheduled": false,
    "id": 29327818,
    "short_url": "http://post.ly/10sND"
  },
  {
    "slug": "default-culture-in-symfony-12-13-and-14-en",
    "media": {
      "images": [],
      "videos": [],
      "audio_files": []
    },
    "number_of_comments": 0,
    "twitter_account": "lucasts",
    "post_image_115": null,
    "post_image_500": null,
    "draft": false,
    "tags": [
      {
        "name": "culture",
        "id": 18035326
      },
      {
        "name": "php",
        "id": 18035325
      },
      {
        "name": "symfony",
        "id": 18035324
      }
    ],
    "title": "Default culture in symfony 1.2, 1.3 and 1.4 [EN]",
    "body_full": "<p>Este blog tamb&eacute;m esta dispon&iacute;vel em portugu&ecirc;s, <a href=\"http://blog.lucas-ts.com/mudando-a-default-culture-no-symfony-12-13-e\" target=\"_self\">clique aqui!</a></p>\r\n<p>A little tip, but that can save lifes!</p>\r\n<p>This week I received a question about why symfony was not changing the culture after insert a new one in the settings.yml file.</p>\r\n<p>usually, if you want the default culture to pt_BR, &nbsp;the file will look like this:</p>\r\n<p><span style=\"font-family: Verdana, sans-serif; font-size: 14px; line-height: 19px;\"> </span></p>\r\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>all:\n  .settings:\n    default_culture: pt_BR</pre></div>\n</div>\n\r\n<p>---</p>\r\n<p>So, you refresh the browser and nothing seems to change.</p>\r\n<p>The problem is that symfony store the default culture within a cookie in the very first request. So if you don`t clear you browse cookies, the new culture won't take effect until the cookie expires.&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "user": {
      "nickname": "lucas-ts",
      "lastname": "Stephanou",
      "body": "A web developer",
      "last_activity": "2012/04/11 23:06:07 -0700",
      "profile_url": "http://posterous.com/users/4SyfnfuUwEqR",
      "profile_pic": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "firstname": "Lucas",
      "display_name": "Lucas Stephanou",
      "id": 711389,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg"
    },
    "current_member": "admin",
    "comments_count": 0,
    "site_id": 1887605,
    "is_private": false,
    "display_date": "2010/09/30 06:57:00 -0700",
    "author_display_name": "Lucas Stephanou",
    "is_owned_by_current_user": true,
    "body_html": "<p>Este blog tamb&eacute;m esta dispon&iacute;vel em portugu&ecirc;s, <a href=\"http://blog.lucas-ts.com/mudando-a-default-culture-no-symfony-12-13-e\" target=\"_self\">clique aqui!</a></p>\r\n<p>A little tip, but that can save lifes!</p>\r\n<p>This week I received a question about why symfony was not changing the culture after insert a new one in the settings.yml file.</p>\r\n<p>usually, if you want the default culture to pt_BR, &nbsp;the file will look like this:</p>\r\n<p><span style=\"font-family: Verdana, sans-serif; font-size: 14px; line-height: 19px;\"> </span></p>\r\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>all:\n  .settings:\n    default_culture: pt_BR</pre></div>\n</div>\n\r\n<p>---</p>\r\n<p>So, you refresh the browser and nothing seems to change.</p>\r\n<p>The problem is that symfony store the default culture within a cookie in the very first request. So if you don`t clear you browse cookies, the new culture won't take effect until the cookie expires.&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "full_url": "http://blog.lucas-ts.com/default-culture-in-symfony-12-13-and-14-en",
    "privatestring": "vvbykJdrbg",
    "body_excerpt": "Este blog também esta disponível em português, clique aqui! A little tip, but that can save lifes! This week I received a question about why symfony was not changing the culture after insert a new one in the settings.yml file. usually, if you want...",
    "likes_count": 0,
    "views_count": 6105,
    "site": {
      "comment_permission": 2,
      "header_image": null,
      "current_user_role": "admin",
      "profile_image_75": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "subhead": "Thoughts from a web developer",
      "current_user_notification_frequency": "immediately",
      "posts_count": 2,
      "full_hostname": "blog.lucas-ts.com",
      "is_private": false,
      "is_group": false,
      "sharing_enabled": true,
      "name": "Lucas Stephanou ",
      "hostname": "lucasts",
      "id": 1887605,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg",
      "time_zone": "Brasilia"
    },
    "locations": [],
    "current_user_likes_post": false,
    "body_cleaned": "<p>Este blog também esta disponível em português, <a href=\"http://blog.lucas-ts.com/mudando-a-default-culture-no-symfony-12-13-e\" rel=\"nofollow\">clique aqui!</a></p>\n<p>A little tip, but that can save lifes!</p>\n<p>This week I received a question about why symfony was not changing the culture after insert a new one in the settings.yml file.</p>\n<p>usually, if you want the default culture to pt_BR,  the file will look like this:</p></p><p><div class=\"CodeRay\">\n  <div class=\"code\"><pre>all:\n  .settings:\n    default_culture: pt_BR</pre></div>\n</div></p><p><p>---</p>\n<p>So, you refresh the browser and nothing seems to change.</p>\n<p>The problem is that symfony store the default culture within a cookie in the very first request. So if you don`t clear you browse cookies, the new culture won't take effect until the cookie expires.  </p>\n<p> </p>\n<p> </p>",
    "allowed": true,
    "replies_count": 0,
    "scheduled": false,
    "id": 29327472,
    "short_url": "http://post.ly/10sIO"
  },
  {
    "slug": "post/1091730260",
    "media": {
      "images": [],
      "videos": [],
      "audio_files": []
    },
    "number_of_comments": 0,
    "twitter_account": "lucasts",
    "post_image_115": null,
    "post_image_500": null,
    "draft": false,
    "tags": [],
    "title": "Playing with Symfony Templating",
    "body_full": "\n<p>A few days ago&nbsp;<a href=\"http://fabien.potencier.org/\">Fabien Potencier</a>, lead developer of&nbsp;<a href=\"http://www.symfony-project.org/\" target=\"_blank\">Symfony project</a>, published a new component&nbsp; of the&nbsp;<a href=\"http://components.symfony-project.org/\">Symfony Components project</a>.</p>\n<p>As you may not know yet, Symfony components is a &ldquo;lego way&rdquo; that Fabien and symfony team found to publish piece by piece the parts that will compose the next big version of symfony framework, the very waited symfony 2 version.</p>\n<p>This last component is a templating framework, but what is that?</p>\n<h2>A TEMPLATING FRAMEWORK AND SOME HISTORY</h2>\n<p>A big part of php developers around the world use day-by-day a templating engine, like smarty and phptal.</p>\n<p>A group of devs have asked in symfony mailing lists to use symfony together with one of those engines.</p>\n<p>But bundle a template engine together with Symfony was never in mind of core team, for some(and good) reasons.</p>\n<p>Some time ago, the Symfony components project was released and putting all parts together we can understand everything, the answer is a templating framework(not a template engine) , giving us a flexibe way to implement whatever &ldquo;engine&rdquo; we want in a standard way.</p>\n<h2>WICH TEMPLATE ENGINE?</h2>\n<p>Well, to test Symfony templating framework we need to choice a engine to reproduce.<br />Wich one?<br />Smarty? No, thanks. Too flat to me.<br /><a href=\"http://phptal.org/\" target=\"_blank\">PHPTal</a>? Maybe<br /><a href=\"http://haml-lang.com/\" target=\"_blank\">Haml</a>? Hum, far away from html and php syntax. A good example to see if the framework&nbsp; is good&nbsp;<div class='p_embed p_image_embed'>\n<img alt=\"\" src=\"http://blog.lucas-ts.com/wp-includes/images/smilies/icon_smile.gif\" />\n</div>\n</p>\n<h2>IMPLEMENTING HAML TEMPLATING ENGINE WITH SYMFONY TEMPLATING FRAMEWORK</h2>\n<p>Since&nbsp;<a href=\"http://haml-lang.com/\" target=\"_blank\">Haml</a>&nbsp;isn&rsquo;t exactly a tiny language, I&rsquo;ll implement just a few features.</p>\n<p>The goal is parse this example:</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>!!!\n%html\n  %head\n    %title= $title\n  %body\n    #header\n      %h1 Symfony templating Haml example\n    #content\n      %img {:src =&gt; 'http://haml-lang.com/images/haml.gif'}\n      %h2 Haml\n      %p Haml is a markup language that’s used to cleanly and simply describe the HTML of any web document without the use of inline code. Haml functions as a replacement for inline page templating systems such as PHP, ASP, and ERB, the templating language used in most Ruby on Rails applications. However, Haml avoids the need for explicitly coding HTML into the template, because it itself is a description of the HTML, with some code to generate dynamic content.\n    #footer\n      %span.author Lucas Stephanou</pre></div>\n</div>\n\n<h2>THE SIMPLE SYMFONY HAML TEMPLATE ENGINE</h2>\n<p>Since&nbsp;<a href=\"http://phphaml.sourceforge.net/\" target=\"_blank\">phphaml</a>&nbsp;is very easy to use, our template renderer class will be simple.</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>&lt;?php\n\n/**\n * sfTemplateRendererHaml is a renderer for Haml templates.\n *\n * @package    symfony\n * @subpackage templating\n * @author     Lucas Stephanou &lt;lucas@lucas-ts.com&gt;\n * @version    SVN: $Id$\n */\nclass sfTemplateRendererHaml extends sfTemplateRenderer\n{\n  private $hamlParser;\n\n  public function __construct(HamlParser $hamlParser)\n  {\n    $this-&gt;hamlParser = $hamlParser;\n  }    \n\n  /**\n   * Evaluates a template.\n   *\n   * @param mixed $template   The template to render\n   * @param array $parameters An array of parameters to pass to the template\n   *\n   * @return string|false The evaluated template, or false if the renderer is unable to render the template\n   */\n  public function evaluate(sfTemplateStorage $template, array $parameters = array())\n  {  \n\n    // even if $template is a string representation, hamlParser will take care of this\n    $this-&gt;hamlParser-&gt;setFile($template);\n\n    foreach($parameters as $key =&gt; $val)\n    {\n      $this-&gt;hamlParser-&gt;assign($key,$val);\n    }   \n\n    return $this-&gt;hamlParser-&gt;render();\n  }\n}</pre></div>\n</div>\n\n<p>The</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>&lt;?php\n__construct(HamlParser $hamlParser)</pre></div>\n</div>\n\n<p>method receive a HamlParser class as argument, this will allow us to implement all this with&nbsp; DI in the next article.</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>&lt;?php\nevaluate($template, array $parameters = array())</pre></div>\n</div>\n\n<p>this method&nbsp; is all we need to do for&nbsp; a renderer class, we receive a $template instance(object or a string) and $parameters.</p>\n<p>Them the symfony templating framework will expect to receive a string(in case of success ) or a boolean false if something goes wrong.</p>\n<h2>TESTING</h2>\n<p>To test if we do all right, just create a single file:</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>&lt;?php\n\nrequire_once '../../symfony_templating/lib/sfTemplateAutoloader.php';\nsfTemplateAutoloader::register();\n\n$loader = new sfTemplateLoaderFilesystem(dirname(__FILE__).'/%name%.haml');\n\nrequire_once dirname(__FILE__).'/../lib/phphaml/haml/HamlParser.class.php';\n$parser = new HamlParser();\n\nrequire_once dirname(__FILE__).'/../lib/sfTemplateRendererHaml.php';\n$engine = new sfTemplateEngine($loader,array(\n 'haml' =&gt; new sfTemplateRendererHaml($parser),\n));\n\necho $engine-&gt;render('haml:example', array('title' =&gt; 'Haml Lucas Test'));</pre></div>\n</div>\n\n<p>Al l code is pretty obvious</p>\n<ol>\n<li>register symfony templating autoload</li>\n<li>instantiate a template loader (in this case a filesystem loader)</li>\n<li>include the HamlParser and instantiate it</li>\n<li>include our haml renderer class</li>\n<li>create a template engine indicating that our class will render haml files</li>\n<li>render&nbsp; the template passing a single parameter(title)</li>\n</ol>\n<p>All code are here for download:</p>\n<p><a href=\"http://dl.getdropbox.com/u/1417411/sfSimpleHaml.tar.bz2\" target=\"_blank\"></a><a href=\"http://dl.getdropbox.com/u/1417411/sfSimpleHaml.tar.bz2\">http://dl.getdropbox.com/u/1417411/sfSimpleHaml.tar.bz2</a></p>",
    "user": {
      "nickname": "lucas-ts",
      "lastname": "Stephanou",
      "body": "A web developer",
      "last_activity": "2012/04/11 23:06:07 -0700",
      "profile_url": "http://posterous.com/users/4SyfnfuUwEqR",
      "profile_pic": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "firstname": "Lucas",
      "display_name": "Lucas Stephanou",
      "id": 711389,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg"
    },
    "current_member": "admin",
    "comments_count": 0,
    "site_id": 1887605,
    "is_private": false,
    "display_date": "2009/10/05 00:00:00 -0700",
    "author_display_name": "Lucas Stephanou",
    "is_owned_by_current_user": true,
    "body_html": "\n<p>A few days ago&nbsp;<a href=\"http://fabien.potencier.org/\">Fabien Potencier</a>, lead developer of&nbsp;<a href=\"http://www.symfony-project.org/\" target=\"_blank\">Symfony project</a>, published a new component&nbsp; of the&nbsp;<a href=\"http://components.symfony-project.org/\">Symfony Components project</a>.</p>\n<p>As you may not know yet, Symfony components is a &ldquo;lego way&rdquo; that Fabien and symfony team found to publish piece by piece the parts that will compose the next big version of symfony framework, the very waited symfony 2 version.</p>\n<p>This last component is a templating framework, but what is that?</p>\n<h2>A TEMPLATING FRAMEWORK AND SOME HISTORY</h2>\n<p>A big part of php developers around the world use day-by-day a templating engine, like smarty and phptal.</p>\n<p>A group of devs have asked in symfony mailing lists to use symfony together with one of those engines.</p>\n<p>But bundle a template engine together with Symfony was never in mind of core team, for some(and good) reasons.</p>\n<p>Some time ago, the Symfony components project was released and putting all parts together we can understand everything, the answer is a templating framework(not a template engine) , giving us a flexibe way to implement whatever &ldquo;engine&rdquo; we want in a standard way.</p>\n<h2>WICH TEMPLATE ENGINE?</h2>\n<p>Well, to test Symfony templating framework we need to choice a engine to reproduce.<br />Wich one?<br />Smarty? No, thanks. Too flat to me.<br /><a href=\"http://phptal.org/\" target=\"_blank\">PHPTal</a>? Maybe<br /><a href=\"http://haml-lang.com/\" target=\"_blank\">Haml</a>? Hum, far away from html and php syntax. A good example to see if the framework&nbsp; is good&nbsp;[[posterous-content:pohkwgGpuEFonmwCutuc]]</p>\n<h2>IMPLEMENTING HAML TEMPLATING ENGINE WITH SYMFONY TEMPLATING FRAMEWORK</h2>\n<p>Since&nbsp;<a href=\"http://haml-lang.com/\" target=\"_blank\">Haml</a>&nbsp;isn&rsquo;t exactly a tiny language, I&rsquo;ll implement just a few features.</p>\n<p>The goal is parse this example:</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>!!!\n%html\n  %head\n    %title= $title\n  %body\n    #header\n      %h1 Symfony templating Haml example\n    #content\n      %img {:src =&gt; 'http://haml-lang.com/images/haml.gif'}\n      %h2 Haml\n      %p Haml is a markup language that’s used to cleanly and simply describe the HTML of any web document without the use of inline code. Haml functions as a replacement for inline page templating systems such as PHP, ASP, and ERB, the templating language used in most Ruby on Rails applications. However, Haml avoids the need for explicitly coding HTML into the template, because it itself is a description of the HTML, with some code to generate dynamic content.\n    #footer\n      %span.author Lucas Stephanou</pre></div>\n</div>\n\n<h2>THE SIMPLE SYMFONY HAML TEMPLATE ENGINE</h2>\n<p>Since&nbsp;<a href=\"http://phphaml.sourceforge.net/\" target=\"_blank\">phphaml</a>&nbsp;is very easy to use, our template renderer class will be simple.</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>&lt;?php\n\n/**\n * sfTemplateRendererHaml is a renderer for Haml templates.\n *\n * @package    symfony\n * @subpackage templating\n * @author     Lucas Stephanou &lt;lucas@lucas-ts.com&gt;\n * @version    SVN: $Id$\n */\nclass sfTemplateRendererHaml extends sfTemplateRenderer\n{\n  private $hamlParser;\n\n  public function __construct(HamlParser $hamlParser)\n  {\n    $this-&gt;hamlParser = $hamlParser;\n  }    \n\n  /**\n   * Evaluates a template.\n   *\n   * @param mixed $template   The template to render\n   * @param array $parameters An array of parameters to pass to the template\n   *\n   * @return string|false The evaluated template, or false if the renderer is unable to render the template\n   */\n  public function evaluate(sfTemplateStorage $template, array $parameters = array())\n  {  \n\n    // even if $template is a string representation, hamlParser will take care of this\n    $this-&gt;hamlParser-&gt;setFile($template);\n\n    foreach($parameters as $key =&gt; $val)\n    {\n      $this-&gt;hamlParser-&gt;assign($key,$val);\n    }   \n\n    return $this-&gt;hamlParser-&gt;render();\n  }\n}</pre></div>\n</div>\n\n<p>The</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>&lt;?php\n__construct(HamlParser $hamlParser)</pre></div>\n</div>\n\n<p>method receive a HamlParser class as argument, this will allow us to implement all this with&nbsp; DI in the next article.</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>&lt;?php\nevaluate($template, array $parameters = array())</pre></div>\n</div>\n\n<p>this method&nbsp; is all we need to do for&nbsp; a renderer class, we receive a $template instance(object or a string) and $parameters.</p>\n<p>Them the symfony templating framework will expect to receive a string(in case of success ) or a boolean false if something goes wrong.</p>\n<h2>TESTING</h2>\n<p>To test if we do all right, just create a single file:</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>&lt;?php\n\nrequire_once '../../symfony_templating/lib/sfTemplateAutoloader.php';\nsfTemplateAutoloader::register();\n\n$loader = new sfTemplateLoaderFilesystem(dirname(__FILE__).'/%name%.haml');\n\nrequire_once dirname(__FILE__).'/../lib/phphaml/haml/HamlParser.class.php';\n$parser = new HamlParser();\n\nrequire_once dirname(__FILE__).'/../lib/sfTemplateRendererHaml.php';\n$engine = new sfTemplateEngine($loader,array(\n 'haml' =&gt; new sfTemplateRendererHaml($parser),\n));\n\necho $engine-&gt;render('haml:example', array('title' =&gt; 'Haml Lucas Test'));</pre></div>\n</div>\n\n<p>Al l code is pretty obvious</p>\n<ol>\n<li>register symfony templating autoload</li>\n<li>instantiate a template loader (in this case a filesystem loader)</li>\n<li>include the HamlParser and instantiate it</li>\n<li>include our haml renderer class</li>\n<li>create a template engine indicating that our class will render haml files</li>\n<li>render&nbsp; the template passing a single parameter(title)</li>\n</ol>\n<p>All code are here for download:</p>\n<p><a href=\"http://dl.getdropbox.com/u/1417411/sfSimpleHaml.tar.bz2\" target=\"_blank\"></a><a href=\"http://dl.getdropbox.com/u/1417411/sfSimpleHaml.tar.bz2\">http://dl.getdropbox.com/u/1417411/sfSimpleHaml.tar.bz2</a></p>",
    "full_url": "http://blog.lucas-ts.com/post/1091730260",
    "privatestring": "huGCviliBA",
    "body_excerpt": "A few days ago Fabien Potencier, lead developer of Symfony project, published a new component of the Symfony Components project. As you may not know yet, Symfony components is a “lego way” that Fabien and symfony team found to publish piece by pie...",
    "likes_count": 0,
    "views_count": 9370,
    "site": {
      "comment_permission": 2,
      "header_image": null,
      "current_user_role": "admin",
      "profile_image_75": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "subhead": "Thoughts from a web developer",
      "current_user_notification_frequency": "immediately",
      "posts_count": 2,
      "full_hostname": "blog.lucas-ts.com",
      "is_private": false,
      "is_group": false,
      "sharing_enabled": true,
      "name": "Lucas Stephanou ",
      "hostname": "lucasts",
      "id": 1887605,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg",
      "time_zone": "Brasilia"
    },
    "locations": [],
    "current_user_likes_post": false,
    "body_cleaned": "<p>A few days ago <a href=\"http://fabien.potencier.org/\" rel=\"nofollow\">Fabien Potencier</a>, lead developer of <a href=\"http://www.symfony-project.org/\" rel=\"nofollow\">Symfony project</a>, published a new component  of the <a href=\"http://components.symfony-project.org/\" rel=\"nofollow\">Symfony Components project</a>.</p>\n<p>As you may not know yet, Symfony components is a “lego way” that Fabien and symfony team found to publish piece by piece the parts that will compose the next big version of symfony framework, the very waited symfony 2 version.</p>\n<p>This last component is a templating framework, but what is that?</p>\n A TEMPLATING FRAMEWORK AND SOME HISTORY \n<p>A big part of php developers around the world use day-by-day a templating engine, like smarty and phptal.</p>\n<p>A group of devs have asked in symfony mailing lists to use symfony together with one of those engines.</p>\n<p>But bundle a template engine together with Symfony was never in mind of core team, for some(and good) reasons.</p>\n<p>Some time ago, the Symfony components project was released and putting all parts together we can understand everything, the answer is a templating framework(not a template engine) , giving us a flexibe way to implement whatever “engine” we want in a standard way.</p>\n WICH TEMPLATE ENGINE? \n<p>Well, to test Symfony templating framework we need to choice a engine to reproduce.<br />Wich one?<br />Smarty? No, thanks. Too flat to me.<br /><a href=\"http://phptal.org/\" rel=\"nofollow\">PHPTal</a>? Maybe<br /><a href=\"http://haml-lang.com/\" rel=\"nofollow\">Haml</a>? Hum, far away from html and php syntax. A good example to see if the framework  is good <span data-type=\"image\" data-full-url=\"http://blog.lucas-ts.com/wp-includes/images/smilies/icon_smile.gif\" data-gallery-id=\"10625008\" data-thumb-url=\"\" data-gallery-download=\"\" data-id=\"14862455\"></span></p>\n IMPLEMENTING HAML TEMPLATING ENGINE WITH SYMFONY TEMPLATING FRAMEWORK \n<p>Since <a href=\"http://haml-lang.com/\" rel=\"nofollow\">Haml</a> isn’t exactly a tiny language, I’ll implement just a few features.</p>\n<p>The goal is parse this example:</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>!!!\n%html\n  %head\n    %title= $title\n  %body\n    #header\n      %h1 Symfony templating Haml example\n    #content\n      %img {:src =&gt; 'http://haml-lang.com/images/haml.gif'}\n      %h2 Haml\n      %p Haml is a markup language that’s used to cleanly and simply describe the HTML of any web document without the use of inline code. Haml functions as a replacement for inline page templating systems such as PHP, ASP, and ERB, the templating language used in most Ruby on Rails applications. However, Haml avoids the need for explicitly coding HTML into the template, because it itself is a description of the HTML, with some code to generate dynamic content.\n    #footer\n      %span.author Lucas Stephanou</pre></div>\n</div></p><p>THE SIMPLE SYMFONY HAML TEMPLATE ENGINE \n<p>Since <a href=\"http://phphaml.sourceforge.net/\" rel=\"nofollow\">phphaml</a> is very easy to use, our template renderer class will be simple.</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre><?php /**\n * sfTemplateRendererHaml is a renderer for Haml templates.\n *\n * @package    symfony\n * @subpackage templating\n * @author     Lucas Stephanou <<a href=\"mailto:lucas@lucas-ts.co\">lucas@lucas-ts.co</a>?>\n * @version    SVN: $Id$\n */\nclass sfTemplateRendererHaml extends sfTemplateRenderer\n{\n  private $hamlParser;</p><p>public function __construct(HamlParser $hamlParser)\n  {\n    $this-&gt;hamlParser = $hamlParser;\n  }    </p><p>/**\n   * Evaluates a template.\n   *\n   * @param mixed $template   The template to render\n   * @param array $parameters An array of parameters to pass to the template\n   *\n   * @return string|false The evaluated template, or false if the renderer is unable to render the template\n   */\n  public function evaluate(sfTemplateStorage $template, array $parameters = array())\n  {  </p><p>// even if $template is a string representation, hamlParser will take care of this\n    $this-&gt;hamlParser-&gt;setFile($template);</p><p>foreach($parameters as $key =&gt; $val)\n    {\n      $this-&gt;hamlParser-&gt;assign($key,$val);\n    }   </p><p>return $this-&gt;hamlParser-&gt;render();\n  }\n}</pre></div>\n</div></p><p><p>The</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre><?php __construct(HamlParser $hamlParser)</pr?></pre></div>\n</div></p><p><p>method receive a HamlParser class as argument, this will allow us to implement all this with  DI in the next article.</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre><?php evaluate($template, array $parameters = array())</pr?></pre></div>\n</div></p><p><p>this method  is all we need to do for  a renderer class, we receive a $template instance(object or a string) and $parameters.</p>\n<p>Them the symfony templating framework will expect to receive a string(in case of success ) or a boolean false if something goes wrong.</p>\n TESTING \n<p>To test if we do all right, just create a single file:</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre><?php require_once '../../symfony_templating/lib/sfTemplateAutoloader.php';\nsfTemplateAutoloader::register();</p><p>$loader = new sfTemplateLoaderFilesystem(dirname(__FILE__).'/%name%.haml');</p><p>require_once dirname(__FILE__).'/../lib/phphaml/haml/HamlParser.class.php';\n$parser = new HamlParser();</p><p>require_once dirname(__FILE__).'/../lib/sfTemplateRendererHaml.php';\n$engine = new sfTemplateEngine($loader,array(\n 'haml' ?> new sfTemplateRendererHaml($parser),\n));</p><p>echo $engine-&gt;render('haml:example', array('title' =&gt; 'Haml Lucas Test'));</pre></div>\n</div></p><p><p>Al l code is pretty obvious</p>\n<ol>\n<li>register symfony templating autoload</li>\n<li>instantiate a template loader (in this case a filesystem loader)</li>\n<li>include the HamlParser and instantiate it</li>\n<li>include our haml renderer class</li>\n<li>create a template engine indicating that our class will render haml files</li>\n<li>render  the template passing a single parameter(title)</li>\n</ol><p>All code are here for download:</p>\n<p><a href=\"http://dl.getdropbox.com/u/1417411/sfSimpleHaml.tar.bz2\" rel=\"nofollow\">http://dl.getdropbox.com/u/1417411/sfSimpleHaml.tar.bz2</a></p>",
    "allowed": true,
    "replies_count": 0,
    "scheduled": false,
    "id": 27819016,
    "short_url": "http://post.ly/2SnGt"
  },
  {
    "slug": "post/1091726046",
    "media": {
      "images": [],
      "videos": [],
      "audio_files": []
    },
    "number_of_comments": 0,
    "twitter_account": "lucasts",
    "post_image_115": null,
    "post_image_500": null,
    "draft": false,
    "tags": [],
    "title": "Untitled",
    "body_full": "<object data=\"http://vimeo.com/moogaloop.swf?clip_id=5518192&amp;server=vimeo.com&amp;fullscreen=1&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF\" type=\"application/x-shockwave-flash\" height=\"300\" width=\"400\"><param name=\"quality\" value=\"best\" />\n<param name=\"allowscriptaccess\" value=\"always\" />\n<param name=\"allowfullscreen\" value=\"true\" />\n<param name=\"scale\" value=\"showAll\" />\n<param name=\"movie\" value=\"http://vimeo.com/moogaloop.swf?clip_id=5518192&amp;server=vimeo.com&amp;fullscreen=1&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF\" />\n<embed src=\"http://www.vimeo.com/moogaloop.swf?clip_id=5518192&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" height=\"300\" width=\"400\"></embed></object> <p></p><p><span>\n<p>Just uploaded to vimeo my first screencast.</p>\n<p>It&rsquo;s a Screencast covering a Symfony Tutorial, the&nbsp; Jobeet Day 1</p>\n<p>About Screencast:<br />It&rsquo;s take a fresh ubuntu&nbsp; and starting install everything that we need to run php/symfony and all things related to Jobeet Day 1</p>\n<p>For this screencast, I can&rsquo;t record audio and edit the video, is purely what I got from screencast recorder, sorry for that.</p>\n</span></p>",
    "user": {
      "nickname": "lucas-ts",
      "lastname": "Stephanou",
      "body": "A web developer",
      "last_activity": "2012/04/11 23:06:07 -0700",
      "profile_url": "http://posterous.com/users/4SyfnfuUwEqR",
      "profile_pic": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "firstname": "Lucas",
      "display_name": "Lucas Stephanou",
      "id": 711389,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg"
    },
    "current_member": "admin",
    "comments_count": 0,
    "site_id": 1887605,
    "is_private": false,
    "display_date": "2009/07/09 00:00:00 -0700",
    "author_display_name": "Lucas Stephanou",
    "is_owned_by_current_user": true,
    "body_html": "<object data=\"http://vimeo.com/moogaloop.swf?clip_id=5518192&amp;server=vimeo.com&amp;fullscreen=1&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF\" type=\"application/x-shockwave-flash\" height=\"300\" width=\"400\"><param name=\"quality\" value=\"best\" />\n<param name=\"allowscriptaccess\" value=\"always\" />\n<param name=\"allowfullscreen\" value=\"true\" />\n<param name=\"scale\" value=\"showAll\" />\n<param name=\"movie\" value=\"http://vimeo.com/moogaloop.swf?clip_id=5518192&amp;server=vimeo.com&amp;fullscreen=1&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF\" />\n<embed src=\"http://www.vimeo.com/moogaloop.swf?clip_id=5518192&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" height=\"300\" width=\"400\"></embed></object> <p></p><p><span>\n<p>Just uploaded to vimeo my first screencast.</p>\n<p>It&rsquo;s a Screencast covering a Symfony Tutorial, the&nbsp; Jobeet Day 1</p>\n<p>About Screencast:<br />It&rsquo;s take a fresh ubuntu&nbsp; and starting install everything that we need to run php/symfony and all things related to Jobeet Day 1</p>\n<p>For this screencast, I can&rsquo;t record audio and edit the video, is purely what I got from screencast recorder, sorry for that.</p>\n</span></p>",
    "full_url": "http://blog.lucas-ts.com/post/1091726046",
    "privatestring": "dtbsFyzkFi",
    "body_excerpt": "Just uploaded to vimeo my first screencast. It’s a Screencast covering a Symfony Tutorial, the Jobeet Day 1 About Screencast:It’s take a fresh ubuntu and starting install everything that we need to run php/symfony and all things related to Jobeet ...",
    "likes_count": 0,
    "views_count": 8015,
    "site": {
      "comment_permission": 2,
      "header_image": null,
      "current_user_role": "admin",
      "profile_image_75": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "subhead": "Thoughts from a web developer",
      "current_user_notification_frequency": "immediately",
      "posts_count": 2,
      "full_hostname": "blog.lucas-ts.com",
      "is_private": false,
      "is_group": false,
      "sharing_enabled": true,
      "name": "Lucas Stephanou ",
      "hostname": "lucasts",
      "id": 1887605,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg",
      "time_zone": "Brasilia"
    },
    "locations": [],
    "current_user_likes_post": false,
    "body_cleaned": "<embed src=\"http://www.vimeo.com/moogaloop.swf?clip_id=5518192&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1\" type=\"application/x-shockwave-flash\" height=\"300\" width=\"400\"></embed> <p><span>\n<p>Just uploaded to vimeo my first screencast.</p>\n<p>It’s a Screencast covering a Symfony Tutorial, the  Jobeet Day 1</p>\n<p>About Screencast:<br />It’s take a fresh ubuntu  and starting install everything that we need to run php/symfony and all things related to Jobeet Day 1</p>\n<p>For this screencast, I can’t record audio and edit the video, is purely what I got from screencast recorder, sorry for that.</p>\n</span></p>",
    "allowed": true,
    "replies_count": 0,
    "scheduled": false,
    "id": 27819018,
    "short_url": "http://post.ly/2SnGu"
  },
  {
    "slug": "post/1091704433",
    "media": {
      "images": [],
      "videos": [],
      "audio_files": []
    },
    "number_of_comments": 0,
    "twitter_account": "lucasts",
    "post_image_115": null,
    "post_image_500": null,
    "draft": false,
    "tags": [],
    "title": "Instalando PHP 5,Fastcgi, lighttpd e symfony framework",
    "body_full": "<span><span>\n<h2 class=\"entry-title\">LIGHTTPD + SYMFONY</h2>\n<p><strong><span>Nota: Este artigo foi escrito em 2006, ele sera atualizado em breve.</span></strong></p>\n<h1 class=\"entry-title\">INSTALANDO PHP 5,FASTCGI, LIGHTTPD E SYMFONY FRAMEWORK</h1>\n<h2>OBJETIVO</h2>\n<p>No final das contas, ter o&nbsp;<a href=\"http://web.archive.org/web/20071223085206/http://www.symfony-project.com/\" title=\"The Symfony PHP5 Framework\">symfony</a>&nbsp;framework, instalado e funcionando. Para isso teremos a instala&ccedil;&atilde;o do lighttpd na porta 81, compila&ccedil;&atilde;o do PHP 5 direto dos fontes com bibliotecas gd e zlib incluidas, suporte a mysql, sqlite, e postgresql.</p>\n<h2>INSTALANDO O LIGHTTPD</h2>\n<p>Optei por instalar via apt-get( ahhh, esqueci de dizer que estou fazendo este tutorial no debian 3, kernel 2.6.17&hellip;), a principio o lighttpd funciona na porta 80, mas como a ideia &eacute; ser uma alternativa vamos instalar na porta 81, ou&nbsp; outro que voce queira. Se voce ja tinha o Apache ( como previsto) e instalou via apt, ja tera um&nbsp; erro ,&nbsp; o httpd vai alegar que nao pode usar a porta 80, pois&nbsp; obvio, ja esta em uso. Logo de um STOP no Apache.</p>\n<p><span>&nbsp;</span><span><span># apt-get install lighttpd</span></span></p>\n<p><span>Aqui ele instalou na porta 80, vamos mudar isso mais a frente.Ok!<br /></span><span>&nbsp;</span><span>Usuarios do slack ( esse esta em casa :-] ), fedora, e outros. Voces devem saber uma forma parecida de instalar, no slack uso o slackpkg, que &eacute; otimo, no fedora tem o rpm.<br />Bem, instalem o bem dito de alguma forma. :-]</span></p>\n<h2><span><span>INSTALANDO DEPENDECIAS PARA COMPILA&Ccedil;&Atilde;O DO PHP</span></span></h2>\n<p>Quando formos compilar o PHP precisaremos&nbsp; de alguns componentes instalados no sistema, entre eles, as bibliotecas, GD, PNG, Jpeg e etc. Eu, como voces ja sabem,&nbsp; estou utilizando debian, ent&atilde;o o que fiz? Ai esta.</p>\n<p><span># apt-get install libpng12-dev libgd-dev libpng12-dev libjpeg62-dev zlib1g-dev libmysql++-dev postgresql-dev libpq-dev libpq4 libxml2-dev</span><p />Todos claro&nbsp;<span>dev,&nbsp;</span>ou seja pacote com os arquivos desenvolvimento (&nbsp; tambem conhecidos como headers ).<br />NOTA: verifiquem em suas distribui&ccedil;&otilde;es, mas no debian a libpq4, &eacute; referente ao Postgresql 8.x.x, e a libpq3 &eacute; referente ao ramo 7.x</p>\n<p>Obs: Essas foram as bibliotecas que eu precisei , voce pode precisar de&nbsp; outras,&nbsp; ent&atilde;o, preste aten&ccedil;&atilde;o nas mensagens do ./configur do PHP , ai voce instala as depencias n&atilde;o encontradas.</p>\n<h2>ALGUNS AJUSTES ANTES DE COMPILAR.</h2>\n<p>Vamos editar o lighttpd.conf, que no debian fica em /etc/lighttpd/</p>\n<p><span># vim /etc/lighttpd/lighttpd.conf<br /></span>Devera ter uma parte que seta o&nbsp;<span>server.port = 80&nbsp;</span>, altere para 81, marromenos assim.<span><br />(&hellip;)<br />######### Options that are good to be but not neccesary to be changed #######</span></p>\n<p>## bind to port (default: 80)<br />server.port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 81</p>\n<p>## bind to localhost only (default: all interfaces)<br />server.bind&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = &ldquo;localhost&rdquo;<br /><span>(&hellip;)</span><br /><span><br /></span>Ok,&nbsp; restart o light e inicie o apache. e verifique no seu navegador <a href=\"http://localhost\">http://localhost</a> (home do apache) e <a href=\"http://localhost:81\">http://localhost:81</a> ( Placeholder lighttpd).<br />A principio estamos aptos a instalar o PHP. Let&rsquo;s go dude.</p>\n<h2>COMPILANDO O PHP 5</h2>\n<p>R&Aacute;&hellip; finalmente chegamos na parte divertida ( que nerd, n&atilde;o?) . 3 li&ccedil;&atilde;es basicas que aprendi na marra.</p>\n<ol>\n<li>Preste aten&ccedil;&atilde;o nas mensagens.</li>\n<li>Preste MUITA aten&ccedil;&atilde;o nas mensagens.</li>\n<li>N&atilde;o se apavore com as mensagens.</li>\n</ol>\n<p>Depois dessas otimas li&ccedil;&otilde;es, vamos ao trabalho.</p>\n<h3>Baixe a ultima vers&atilde;o do PHP5.</h3>\n<p>Entre em&nbsp;<a href=\"http://web.archive.org/web/20071223085206/http://br2.php.net/downloads.php\" title=\"Pagina de Downloads do PHP\" target=\"blank_\">PHP Downloads</a>&nbsp;e baixe o tar.bz2 da vers&atilde;o estavel ( Complete Source Code).&nbsp; PS.:&nbsp;<a href=\"http://web.archive.org/web/20071223085206/http://br2.php.net/get/php-5.1.4.tar.bz2/from/this/mirror\" title=\"Ei, sempre verifique se n&atilde;o existe uma vers&atilde;o mais nova\" target=\"blank_\">Link Direto para Vers&atilde;o 5.1.4</a></p>\n<p>Salve este arquivo no seu /tmp/</p>\n<h3><span>Descompactar</span></h3>\n<p><span># tar -jxvf php-5.1.4.tar.bz2<br /></span>Sera criada a pasta php-5.1.4&nbsp;em /tmp,&nbsp; ficando /tmp/php-5.1.4/<br /><span>&nbsp;</span><span><br /># cd /tmp/</span><span>php-5.1.4/</span></p>\n<h3><span>Configurar&nbsp; Compila&ccedil;&atilde;o.</span></h3>\n<p><span># ./configure &ndash;enable-fastcgi &ndash;with-gd &ndash;with-mysql &ndash;with-pgsql &ndash;with-zlib &ndash;with-pear=/opt/php5-cgi/pear &ndash;prefix=/opt/php5-cgi &ndash;with-libxml-dir=/usr/lib/<br /></span>Assim, pedimos que o bash&nbsp;<span>configure&nbsp;</span>habilite o modo&nbsp;<span>fastcgi (&nbsp;</span><span>&ndash;enable-fastcgi</span><span>)</span>,&nbsp; compile com&nbsp;<span>gd</span>,<span>&nbsp;mysql</span>,<span>&nbsp;postgresql&nbsp;</span>(<span>&nbsp;&ndash;with-pgsql&nbsp;</span>)<span>&nbsp;</span>e<span>&nbsp;zlib ( biblioteca de compress&atilde;o&nbsp;</span>) ,<span>&nbsp;</span>o parametro&nbsp;<span>&ndash;with-pear=/opt/php5-cgi/pear&nbsp;</span>avisa para instalar o pear no diretorio especificado,&nbsp;<span>&ndash;prefix=/opt/php5-cgi&nbsp;</span>avisa em qual diretorio queremos a instala&ccedil;&atilde;o do&nbsp;<span>PHP</span>&nbsp;e por ultimo informamos o caminho da&nbsp;<span>libxml</span>&nbsp;(&nbsp;<span>&ndash;with-libxml-dir=/usr/lib/</span><span>&nbsp;</span>).<br />Ps.: Volto a repetir, neste ponto voces podem ter problema com dependencias, que tentamos suprir anteriormente, pode acontecer de a biblioteca que&nbsp; o configure acusa n&atilde;o ter, estar presente, mas ele nao saber aonde, para isso informe a ele, como feito com a libxml, que passamos direto o local, no caso /usr/lib/.</p>\n<h3><span>Make</span></h3>\n<p>Se o ./configure tiver tido sucesso, compilamos e instalamos:<br /><span># make &amp;&amp; make install<br /></span>Agora, va tomar um caf&eacute;, jogar play2, liga pra mulher s&oacute; pra dar um oi , pois o make leva em torno de 15 minutos para compilar tudo, o make install &eacute; rapido, coisa de 20 segundos e ela coloca as coisas no lugar.<span><br />( &hellip; ) after 15 minutes ( &hellip; )</span><br />Olha que beleza. temos tudo pronto. entre no diretorio de instala&ccedil;&atilde;o, se tiver seguido a risca sera /opt/php5-cgi/, e de uma olhada.</p>\n<h2>CONFIGURANDO</h2>\n<h3><span>PHP</span></h3>\n<p>Entre no diretorio do PHP:<br /><span># /opt/php5-cgi</span></p>\n<p>Vamos agora copiar o php.ini<br /><span># cp /tmp/php-5.1.4/php.ini-dist /opt/php5-cgi/lib/php.ini</span></p>\n<p>E claro, vamos dar uma pequena arrumada para funcionar como symfony&nbsp;<div class='p_embed p_image_embed'>\n<img alt=\"\" src=\"http://blog.lucas-ts.com/wp-includes/images/smilies/icon_smile.gif\" />\n</div>\n<br /><span># vim /opt/php5-cgi/lib/php.ini<br /></span>Localize a variavel de configura&ccedil;&atilde;o&nbsp;<span>magic_quotes_gpc&nbsp;</span>, que devera estar setada como On, altere para Off ficando assim:<br /><span>( &hellip; )</span><br /><span>; Magic quotes for incoming GET/POST/Cookie data.</span><br /><span>magic_quotes_gpc = Off</span><br /><span>( &hellip; )<br /></span>Aproveite e localize tambem a se&ccedil;&atilde;o sobre session ( :-] ),&nbsp; descomente a var de config&nbsp;<span>session.save_path&nbsp;</span>e sete ela para /tmp, ou um dir que o PHP tenha direito de escrita durante a execu&ccedil;&atilde;o.<br /><span>( &hellip; )</span><br />; where MODE is the octal representation of the mode. Note that this<br />; does not overwrite the process&rsquo;s umask.<br />session.save_path = &ldquo;/tmp&rdquo;<br /><span>( &hellip; )</span></p>\n<p><div class='p_embed p_image_embed'>\n<img alt=\"\" src=\"http://blog.lucas-ts.com/wp-includes/images/smilies/icon_smile.gif\" />\n</div>\n&nbsp;, PHP agora esta prontinho para rodar!</p>\n<h3><span>lighttpd</span></h3>\n<p>Entre no diretorio de configura&ccedil;&atilde;o disponiveis.<br /><span># cd /etc/lighttpd/conf-available</span></p>\n<p>Edite o arquivo de configura&ccedil;&atilde;o do fastcgi<br /><span># vim 10-fastcgi.conf</span></p>\n<p>Delete todo o conteudo original, e deixe assim<br />#*********************************************************************</p>\n<span>server.modules&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += ( &ldquo;mod_fastcgi&rdquo; )</span><p /><span>fastcgi.server = &nbsp;&nbsp;&nbsp; ( &ldquo;.php&rdquo; =&gt;</span><br /><span>( &ldquo;*&rdquo; =&gt;</span><br /><span>( &ldquo;socket&rdquo; =&gt; &ldquo;/tmp/php5-fcgi.socket&rdquo;,</span><br /><span>&ldquo;bin-path&rdquo; =&gt; &ldquo;/opt/php5-cgi/bin/php&rdquo;</span><br /><span>)</span><br /><span>)</span><br /><span>)</span>\n<p>#*********************************************************************</p>\n<p>Ap&oacute;s isso, habilite o modulo<br /><span># lighty-enable-mod fastcgi</span></p>\n<p>Opa, vamos dar um restart no lighttpd<br /><span># /etc/init.d/lighttpd restart</span></p>\n<p>Teste rapido, crie um arquivo /var/www/info.php ( estou assumindo que&nbsp; o dir raiz seja /var/www/ )<span>&nbsp;</span>com o conteudo&nbsp;<span>&lt;?php phpinfo();&nbsp;?&gt;,&nbsp;</span>abra o seu navegador e aponte para <a href=\"http://localhost:81/info.php\">http://localhost:81/info.php</a>, se ver aquela tradicional tela com as informa&ccedil;&otilde;es do PHP, e especificar a vers&atilde;o certinho com o fastcgi. otimo, realmente tudo saiu como esperado, se n&atilde;o, revise o passos.</p>\n<h2>GO SYMFONY, GO!</h2>\n<p>Vamos agora a instala&ccedil;&atilde;o do symfony, que sera instalado via pear.</p>\n<p>Primeiro, vamos para o direitorio bin do php.<br /><span># cd /opt/php5-cgi/bin</span></p>\n<p>Agora, atualizamos o pear<br /><span># ./pear upgrade PEAR</span></p>\n<p>Beleza, hora de adicionarmos o canal do symfony, ahhh , precisa de conex&atilde;o web &eacute; claro ( se estiver usando proxy, export http_proxy=&rdquo;<a href=\"http://ip\">http://ip</a>:porta&rdquo; )<br /><span># ./pear channel-discover pear.symfony-project.com</span></p>\n<p>Finalmente instalamos o symfony, no caso o beta ( trunk/night-build)<br /><span># ./pear install symfony/symfony-beta</span></p>\n<p>Precisamos instalar tambem o Phing<br /># ./pear install <a href=\"http://phing.info/pear/phing-current.tgz\">http://phing.info/pear/phing-current.tgz</a></p>\n<p>Ok, agora vamos corrigir um pequeno detalhe, caso voce tenha tambem outra vers&atilde;o do php instalada, trocaremos o executavel do php para o qual o symfony aponta.<br /><span># vim /opt/php5-cgi/bin/symfony<br /></span>Estando com o arquivo aberto, localize a linha:<br /><span>export PHP_COMMAND=php<br /></span>Altere para:<br /><span>export PHP_COMMAND=/opt/php5-cgi/bin/php</span></p>\n<p>Para finalizar criamos um link para o binario do symfony<br /><span># ln -s /opt/php5-cgi/bin/symfony /usr/bin/symfony</span></p>\n<p>Para testa, tecle no terminal<br /># symfony -T<br />Se aparecer uma lista de op&ccedil;&otilde;es do symfony, ok, estamos indo bem.<br /><span><br /></span></p>\n<h2>SYMFONY AT LIGHTTPD</h2>\n<p>Pronto, temos tudo para funcionar, lighttpd instalado, php compilado e symfony instalado.</p>\n<p>Vamos criar uma pasta para nosso projeto symfony de teste<br /><span># mkdir /var/www/symfony-teste<br /># cd /var/www/symfony-teste</span></p>\n<p>Temos o diretorio, agora vamos criar a estrutura<br /><span># symfony new symfony-teste<br /></span>Verifique o diretorio (&nbsp;<span>ls -la</span>) deve ter sido criada uma serie de diretorios ( app, lib, data, web, e etc.)</p>\n<p>Vamos criar um blog como aplica&ccedil;&atilde;o teste<br /><span># symfony app blog</span></p>\n<p>E um modulo Teste<br />#symfony module blog Teste</p>\n<p>Vamos alterar o index padrao.<br /><span>#vim apps/blog/modules/Teste/templates/indexSuccess.php</span><br /><span>&nbsp;</span>Coloque qualquer codigo html , ou altere o que ja existe.</p>\n<p>Agora o teste final, abrar o navegador, e aponte para <a href=\"http://localhost:81/\">http://localhost:81/</a><br />ooopsss.<br />Nada? faltou alguma coisa?<br />Claro, precisamos avisar o lighttpd, para isso abra novamente o lighttpd.conf<br /><span># vim /etc/lighttpd/lighttpd.conf<br /></span>Localize a config&nbsp;<span>server.document-root&nbsp;</span>e altere do que estiver para<br /><span>server.document-root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = &ldquo;/var/www/s</span><span>ymfony-teste</span><span>/web/&rdquo;<br /></span><br />Ap&oacute;s localize essa parte:</p>\n<span>$HTTP[&ldquo;host&rdquo;] == &ldquo;localhost&rdquo; {</span><br /><span>alias.url += (</span><br /><span>&ldquo;/doc/&rdquo; =&gt; &ldquo;/usr/share/doc/&rdquo;,</span><br /><span>&ldquo;/images/&rdquo; =&gt; &ldquo;/usr/share/images/&rdquo;</span><br /><span>)</span><br /><span>dir-listing.activate = &ldquo;enable&rdquo;</span><br /><span>}</span>\n<p>Troque para:</p>\n<span>$HTTP[&ldquo;host&rdquo;] == &ldquo;localhost&rdquo; {</span><br /><span>alias.url += (</span><br /><span>&ldquo;/doc/&rdquo; =&gt; &ldquo;/usr/share/doc/&rdquo;,</span><br /><span>&ldquo;/images/&rdquo; =&gt; &ldquo;/usr/share/images/&rdquo;,</span><br /><span>&ldquo;/sf/&rdquo; =&gt; &ldquo;/opt/php5-cgi/pear/data/symfony/web/sf/&rdquo;</span><br /><span>)</span><br /><span>dir-listing.activate = &ldquo;enable&rdquo;</span><br /><span>}</span>\n<p>Ou seja, incluimos na lista de alias a pasta do symfony.</p>\n<p>Agora sim, reinicie novamente o lighttpd, abra o navegador e aponte dessa vez para&nbsp;&nbsp;<span><a href=\"http://localhost:81/blog_dev.php/Teste\">http://localhost:81/blog_dev.php/Teste</a> ,&nbsp;</span>voce devera visualizar a rederiza&ccedil;&atilde;o daquele arquivo que modificamos anteriormente.</p>\n<h2>CONCLUS&Atilde;O</h2>\n<p>Era isso pessoal, qualquer erro ou problema, me mandem um e-mail ( domluc at gmail dot com ), que responderei o mais rapido possivel.</p>\n<h2>TODO</h2>\n<ul>\n<li>Incluir Configura&ccedil;&atilde;o do Rewrite Url no lighttpd</li>\n<li>Virtual Host para cada projeto</li>\n</ul>\n<span><br /></span>\n<p>Criado em 07/08/2006 por Lucas Stephanou<br />Ultima Altera&ccedil;&atilde;o 08/08/2006</p>\n</span></span>",
    "user": {
      "nickname": "lucas-ts",
      "lastname": "Stephanou",
      "body": "A web developer",
      "last_activity": "2012/04/11 23:06:07 -0700",
      "profile_url": "http://posterous.com/users/4SyfnfuUwEqR",
      "profile_pic": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "firstname": "Lucas",
      "display_name": "Lucas Stephanou",
      "id": 711389,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg"
    },
    "current_member": "admin",
    "comments_count": 0,
    "site_id": 1887605,
    "is_private": false,
    "display_date": "2009/07/03 00:00:00 -0700",
    "author_display_name": "Lucas Stephanou",
    "is_owned_by_current_user": true,
    "body_html": "<span><span>\n<h2 class=\"entry-title\">LIGHTTPD + SYMFONY</h2>\n<p><strong><span>Nota: Este artigo foi escrito em 2006, ele sera atualizado em breve.</span></strong></p>\n<h1 class=\"entry-title\">INSTALANDO PHP 5,FASTCGI, LIGHTTPD E SYMFONY FRAMEWORK</h1>\n<h2>OBJETIVO</h2>\n<p>No final das contas, ter o&nbsp;<a href=\"http://web.archive.org/web/20071223085206/http://www.symfony-project.com/\" title=\"The Symfony PHP5 Framework\">symfony</a>&nbsp;framework, instalado e funcionando. Para isso teremos a instala&ccedil;&atilde;o do lighttpd na porta 81, compila&ccedil;&atilde;o do PHP 5 direto dos fontes com bibliotecas gd e zlib incluidas, suporte a mysql, sqlite, e postgresql.</p>\n<h2>INSTALANDO O LIGHTTPD</h2>\n<p>Optei por instalar via apt-get( ahhh, esqueci de dizer que estou fazendo este tutorial no debian 3, kernel 2.6.17&hellip;), a principio o lighttpd funciona na porta 80, mas como a ideia &eacute; ser uma alternativa vamos instalar na porta 81, ou&nbsp; outro que voce queira. Se voce ja tinha o Apache ( como previsto) e instalou via apt, ja tera um&nbsp; erro ,&nbsp; o httpd vai alegar que nao pode usar a porta 80, pois&nbsp; obvio, ja esta em uso. Logo de um STOP no Apache.</p>\n<p><span>&nbsp;</span><span><span># apt-get install lighttpd</span></span></p>\n<p><span>Aqui ele instalou na porta 80, vamos mudar isso mais a frente.Ok!<br /></span><span>&nbsp;</span><span>Usuarios do slack ( esse esta em casa :-] ), fedora, e outros. Voces devem saber uma forma parecida de instalar, no slack uso o slackpkg, que &eacute; otimo, no fedora tem o rpm.<br />Bem, instalem o bem dito de alguma forma. :-]</span></p>\n<h2><span><span>INSTALANDO DEPENDECIAS PARA COMPILA&Ccedil;&Atilde;O DO PHP</span></span></h2>\n<p>Quando formos compilar o PHP precisaremos&nbsp; de alguns componentes instalados no sistema, entre eles, as bibliotecas, GD, PNG, Jpeg e etc. Eu, como voces ja sabem,&nbsp; estou utilizando debian, ent&atilde;o o que fiz? Ai esta.</p>\n<p><span># apt-get install libpng12-dev libgd-dev libpng12-dev libjpeg62-dev zlib1g-dev libmysql++-dev postgresql-dev libpq-dev libpq4 libxml2-dev</span><p />Todos claro&nbsp;<span>dev,&nbsp;</span>ou seja pacote com os arquivos desenvolvimento (&nbsp; tambem conhecidos como headers ).<br />NOTA: verifiquem em suas distribui&ccedil;&otilde;es, mas no debian a libpq4, &eacute; referente ao Postgresql 8.x.x, e a libpq3 &eacute; referente ao ramo 7.x</p>\n<p>Obs: Essas foram as bibliotecas que eu precisei , voce pode precisar de&nbsp; outras,&nbsp; ent&atilde;o, preste aten&ccedil;&atilde;o nas mensagens do ./configur do PHP , ai voce instala as depencias n&atilde;o encontradas.</p>\n<h2>ALGUNS AJUSTES ANTES DE COMPILAR.</h2>\n<p>Vamos editar o lighttpd.conf, que no debian fica em /etc/lighttpd/</p>\n<p><span># vim /etc/lighttpd/lighttpd.conf<br /></span>Devera ter uma parte que seta o&nbsp;<span>server.port = 80&nbsp;</span>, altere para 81, marromenos assim.<span><br />(&hellip;)<br />######### Options that are good to be but not neccesary to be changed #######</span></p>\n<p>## bind to port (default: 80)<br />server.port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 81</p>\n<p>## bind to localhost only (default: all interfaces)<br />server.bind&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = &ldquo;localhost&rdquo;<br /><span>(&hellip;)</span><br /><span><br /></span>Ok,&nbsp; restart o light e inicie o apache. e verifique no seu navegador <a href=\"http://localhost\">http://localhost</a> (home do apache) e <a href=\"http://localhost:81\">http://localhost:81</a> ( Placeholder lighttpd).<br />A principio estamos aptos a instalar o PHP. Let&rsquo;s go dude.</p>\n<h2>COMPILANDO O PHP 5</h2>\n<p>R&Aacute;&hellip; finalmente chegamos na parte divertida ( que nerd, n&atilde;o?) . 3 li&ccedil;&atilde;es basicas que aprendi na marra.</p>\n<ol>\n<li>Preste aten&ccedil;&atilde;o nas mensagens.</li>\n<li>Preste MUITA aten&ccedil;&atilde;o nas mensagens.</li>\n<li>N&atilde;o se apavore com as mensagens.</li>\n</ol>\n<p>Depois dessas otimas li&ccedil;&otilde;es, vamos ao trabalho.</p>\n<h3>Baixe a ultima vers&atilde;o do PHP5.</h3>\n<p>Entre em&nbsp;<a href=\"http://web.archive.org/web/20071223085206/http://br2.php.net/downloads.php\" title=\"Pagina de Downloads do PHP\" target=\"blank_\">PHP Downloads</a>&nbsp;e baixe o tar.bz2 da vers&atilde;o estavel ( Complete Source Code).&nbsp; PS.:&nbsp;<a href=\"http://web.archive.org/web/20071223085206/http://br2.php.net/get/php-5.1.4.tar.bz2/from/this/mirror\" title=\"Ei, sempre verifique se n&atilde;o existe uma vers&atilde;o mais nova\" target=\"blank_\">Link Direto para Vers&atilde;o 5.1.4</a></p>\n<p>Salve este arquivo no seu /tmp/</p>\n<h3><span>Descompactar</span></h3>\n<p><span># tar -jxvf php-5.1.4.tar.bz2<br /></span>Sera criada a pasta php-5.1.4&nbsp;em /tmp,&nbsp; ficando /tmp/php-5.1.4/<br /><span>&nbsp;</span><span><br /># cd /tmp/</span><span>php-5.1.4/</span></p>\n<h3><span>Configurar&nbsp; Compila&ccedil;&atilde;o.</span></h3>\n<p><span># ./configure &ndash;enable-fastcgi &ndash;with-gd &ndash;with-mysql &ndash;with-pgsql &ndash;with-zlib &ndash;with-pear=/opt/php5-cgi/pear &ndash;prefix=/opt/php5-cgi &ndash;with-libxml-dir=/usr/lib/<br /></span>Assim, pedimos que o bash&nbsp;<span>configure&nbsp;</span>habilite o modo&nbsp;<span>fastcgi (&nbsp;</span><span>&ndash;enable-fastcgi</span><span>)</span>,&nbsp; compile com&nbsp;<span>gd</span>,<span>&nbsp;mysql</span>,<span>&nbsp;postgresql&nbsp;</span>(<span>&nbsp;&ndash;with-pgsql&nbsp;</span>)<span>&nbsp;</span>e<span>&nbsp;zlib ( biblioteca de compress&atilde;o&nbsp;</span>) ,<span>&nbsp;</span>o parametro&nbsp;<span>&ndash;with-pear=/opt/php5-cgi/pear&nbsp;</span>avisa para instalar o pear no diretorio especificado,&nbsp;<span>&ndash;prefix=/opt/php5-cgi&nbsp;</span>avisa em qual diretorio queremos a instala&ccedil;&atilde;o do&nbsp;<span>PHP</span>&nbsp;e por ultimo informamos o caminho da&nbsp;<span>libxml</span>&nbsp;(&nbsp;<span>&ndash;with-libxml-dir=/usr/lib/</span><span>&nbsp;</span>).<br />Ps.: Volto a repetir, neste ponto voces podem ter problema com dependencias, que tentamos suprir anteriormente, pode acontecer de a biblioteca que&nbsp; o configure acusa n&atilde;o ter, estar presente, mas ele nao saber aonde, para isso informe a ele, como feito com a libxml, que passamos direto o local, no caso /usr/lib/.</p>\n<h3><span>Make</span></h3>\n<p>Se o ./configure tiver tido sucesso, compilamos e instalamos:<br /><span># make &amp;&amp; make install<br /></span>Agora, va tomar um caf&eacute;, jogar play2, liga pra mulher s&oacute; pra dar um oi , pois o make leva em torno de 15 minutos para compilar tudo, o make install &eacute; rapido, coisa de 20 segundos e ela coloca as coisas no lugar.<span><br />( &hellip; ) after 15 minutes ( &hellip; )</span><br />Olha que beleza. temos tudo pronto. entre no diretorio de instala&ccedil;&atilde;o, se tiver seguido a risca sera /opt/php5-cgi/, e de uma olhada.</p>\n<h2>CONFIGURANDO</h2>\n<h3><span>PHP</span></h3>\n<p>Entre no diretorio do PHP:<br /><span># /opt/php5-cgi</span></p>\n<p>Vamos agora copiar o php.ini<br /><span># cp /tmp/php-5.1.4/php.ini-dist /opt/php5-cgi/lib/php.ini</span></p>\n<p>E claro, vamos dar uma pequena arrumada para funcionar como symfony&nbsp;[[posterous-content:brfniHdifHBwoHEuuHsm]]<br /><span># vim /opt/php5-cgi/lib/php.ini<br /></span>Localize a variavel de configura&ccedil;&atilde;o&nbsp;<span>magic_quotes_gpc&nbsp;</span>, que devera estar setada como On, altere para Off ficando assim:<br /><span>( &hellip; )</span><br /><span>; Magic quotes for incoming GET/POST/Cookie data.</span><br /><span>magic_quotes_gpc = Off</span><br /><span>( &hellip; )<br /></span>Aproveite e localize tambem a se&ccedil;&atilde;o sobre session ( :-] ),&nbsp; descomente a var de config&nbsp;<span>session.save_path&nbsp;</span>e sete ela para /tmp, ou um dir que o PHP tenha direito de escrita durante a execu&ccedil;&atilde;o.<br /><span>( &hellip; )</span><br />; where MODE is the octal representation of the mode. Note that this<br />; does not overwrite the process&rsquo;s umask.<br />session.save_path = &ldquo;/tmp&rdquo;<br /><span>( &hellip; )</span></p>\n<p>[[posterous-content:brfniHdifHBwoHEuuHsm]]&nbsp;, PHP agora esta prontinho para rodar!</p>\n<h3><span>lighttpd</span></h3>\n<p>Entre no diretorio de configura&ccedil;&atilde;o disponiveis.<br /><span># cd /etc/lighttpd/conf-available</span></p>\n<p>Edite o arquivo de configura&ccedil;&atilde;o do fastcgi<br /><span># vim 10-fastcgi.conf</span></p>\n<p>Delete todo o conteudo original, e deixe assim<br />#*********************************************************************</p>\n<span>server.modules&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += ( &ldquo;mod_fastcgi&rdquo; )</span><p /><span>fastcgi.server = &nbsp;&nbsp;&nbsp; ( &ldquo;.php&rdquo; =&gt;</span><br /><span>( &ldquo;*&rdquo; =&gt;</span><br /><span>( &ldquo;socket&rdquo; =&gt; &ldquo;/tmp/php5-fcgi.socket&rdquo;,</span><br /><span>&ldquo;bin-path&rdquo; =&gt; &ldquo;/opt/php5-cgi/bin/php&rdquo;</span><br /><span>)</span><br /><span>)</span><br /><span>)</span>\n<p>#*********************************************************************</p>\n<p>Ap&oacute;s isso, habilite o modulo<br /><span># lighty-enable-mod fastcgi</span></p>\n<p>Opa, vamos dar um restart no lighttpd<br /><span># /etc/init.d/lighttpd restart</span></p>\n<p>Teste rapido, crie um arquivo /var/www/info.php ( estou assumindo que&nbsp; o dir raiz seja /var/www/ )<span>&nbsp;</span>com o conteudo&nbsp;<span>&lt;?php phpinfo();&nbsp;?&gt;,&nbsp;</span>abra o seu navegador e aponte para <a href=\"http://localhost:81/info.php\">http://localhost:81/info.php</a>, se ver aquela tradicional tela com as informa&ccedil;&otilde;es do PHP, e especificar a vers&atilde;o certinho com o fastcgi. otimo, realmente tudo saiu como esperado, se n&atilde;o, revise o passos.</p>\n<h2>GO SYMFONY, GO!</h2>\n<p>Vamos agora a instala&ccedil;&atilde;o do symfony, que sera instalado via pear.</p>\n<p>Primeiro, vamos para o direitorio bin do php.<br /><span># cd /opt/php5-cgi/bin</span></p>\n<p>Agora, atualizamos o pear<br /><span># ./pear upgrade PEAR</span></p>\n<p>Beleza, hora de adicionarmos o canal do symfony, ahhh , precisa de conex&atilde;o web &eacute; claro ( se estiver usando proxy, export http_proxy=&rdquo;<a href=\"http://ip\">http://ip</a>:porta&rdquo; )<br /><span># ./pear channel-discover pear.symfony-project.com</span></p>\n<p>Finalmente instalamos o symfony, no caso o beta ( trunk/night-build)<br /><span># ./pear install symfony/symfony-beta</span></p>\n<p>Precisamos instalar tambem o Phing<br /># ./pear install <a href=\"http://phing.info/pear/phing-current.tgz\">http://phing.info/pear/phing-current.tgz</a></p>\n<p>Ok, agora vamos corrigir um pequeno detalhe, caso voce tenha tambem outra vers&atilde;o do php instalada, trocaremos o executavel do php para o qual o symfony aponta.<br /><span># vim /opt/php5-cgi/bin/symfony<br /></span>Estando com o arquivo aberto, localize a linha:<br /><span>export PHP_COMMAND=php<br /></span>Altere para:<br /><span>export PHP_COMMAND=/opt/php5-cgi/bin/php</span></p>\n<p>Para finalizar criamos um link para o binario do symfony<br /><span># ln -s /opt/php5-cgi/bin/symfony /usr/bin/symfony</span></p>\n<p>Para testa, tecle no terminal<br /># symfony -T<br />Se aparecer uma lista de op&ccedil;&otilde;es do symfony, ok, estamos indo bem.<br /><span><br /></span></p>\n<h2>SYMFONY AT LIGHTTPD</h2>\n<p>Pronto, temos tudo para funcionar, lighttpd instalado, php compilado e symfony instalado.</p>\n<p>Vamos criar uma pasta para nosso projeto symfony de teste<br /><span># mkdir /var/www/symfony-teste<br /># cd /var/www/symfony-teste</span></p>\n<p>Temos o diretorio, agora vamos criar a estrutura<br /><span># symfony new symfony-teste<br /></span>Verifique o diretorio (&nbsp;<span>ls -la</span>) deve ter sido criada uma serie de diretorios ( app, lib, data, web, e etc.)</p>\n<p>Vamos criar um blog como aplica&ccedil;&atilde;o teste<br /><span># symfony app blog</span></p>\n<p>E um modulo Teste<br />#symfony module blog Teste</p>\n<p>Vamos alterar o index padrao.<br /><span>#vim apps/blog/modules/Teste/templates/indexSuccess.php</span><br /><span>&nbsp;</span>Coloque qualquer codigo html , ou altere o que ja existe.</p>\n<p>Agora o teste final, abrar o navegador, e aponte para <a href=\"http://localhost:81/\">http://localhost:81/</a><br />ooopsss.<br />Nada? faltou alguma coisa?<br />Claro, precisamos avisar o lighttpd, para isso abra novamente o lighttpd.conf<br /><span># vim /etc/lighttpd/lighttpd.conf<br /></span>Localize a config&nbsp;<span>server.document-root&nbsp;</span>e altere do que estiver para<br /><span>server.document-root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = &ldquo;/var/www/s</span><span>ymfony-teste</span><span>/web/&rdquo;<br /></span><br />Ap&oacute;s localize essa parte:</p>\n<span>$HTTP[&ldquo;host&rdquo;] == &ldquo;localhost&rdquo; {</span><br /><span>alias.url += (</span><br /><span>&ldquo;/doc/&rdquo; =&gt; &ldquo;/usr/share/doc/&rdquo;,</span><br /><span>&ldquo;/images/&rdquo; =&gt; &ldquo;/usr/share/images/&rdquo;</span><br /><span>)</span><br /><span>dir-listing.activate = &ldquo;enable&rdquo;</span><br /><span>}</span>\n<p>Troque para:</p>\n<span>$HTTP[&ldquo;host&rdquo;] == &ldquo;localhost&rdquo; {</span><br /><span>alias.url += (</span><br /><span>&ldquo;/doc/&rdquo; =&gt; &ldquo;/usr/share/doc/&rdquo;,</span><br /><span>&ldquo;/images/&rdquo; =&gt; &ldquo;/usr/share/images/&rdquo;,</span><br /><span>&ldquo;/sf/&rdquo; =&gt; &ldquo;/opt/php5-cgi/pear/data/symfony/web/sf/&rdquo;</span><br /><span>)</span><br /><span>dir-listing.activate = &ldquo;enable&rdquo;</span><br /><span>}</span>\n<p>Ou seja, incluimos na lista de alias a pasta do symfony.</p>\n<p>Agora sim, reinicie novamente o lighttpd, abra o navegador e aponte dessa vez para&nbsp;&nbsp;<span><a href=\"http://localhost:81/blog_dev.php/Teste\">http://localhost:81/blog_dev.php/Teste</a> ,&nbsp;</span>voce devera visualizar a rederiza&ccedil;&atilde;o daquele arquivo que modificamos anteriormente.</p>\n<h2>CONCLUS&Atilde;O</h2>\n<p>Era isso pessoal, qualquer erro ou problema, me mandem um e-mail ( domluc at gmail dot com ), que responderei o mais rapido possivel.</p>\n<h2>TODO</h2>\n<ul>\n<li>Incluir Configura&ccedil;&atilde;o do Rewrite Url no lighttpd</li>\n<li>Virtual Host para cada projeto</li>\n</ul>\n<span><br /></span>\n<p>Criado em 07/08/2006 por Lucas Stephanou<br />Ultima Altera&ccedil;&atilde;o 08/08/2006</p>\n</span></span>",
    "full_url": "http://blog.lucas-ts.com/post/1091704433",
    "privatestring": "spAioBcDeB",
    "body_excerpt": "LIGHTTPD + SYMFONY Nota: Este artigo foi escrito em 2006, ele sera atualizado em breve. INSTALANDO PHP 5,FASTCGI, LIGHTTPD E SYMFONY FRAMEWORK OBJETIVO No final das contas, ter o symfony framework, instalado e funcionando. Para isso teremos a inst...",
    "likes_count": 0,
    "views_count": 8381,
    "site": {
      "comment_permission": 2,
      "header_image": null,
      "current_user_role": "admin",
      "profile_image_75": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30.jpg",
      "subhead": "Thoughts from a web developer",
      "current_user_notification_frequency": "immediately",
      "posts_count": 2,
      "full_hostname": "blog.lucas-ts.com",
      "is_private": false,
      "is_group": false,
      "sharing_enabled": true,
      "name": "Lucas Stephanou ",
      "hostname": "lucasts",
      "id": 1887605,
      "profile_image_35": "//files.posterous.com/user_profile_pics/741340/Photo_on_2010-04-13_at_15.30_thumb.jpg",
      "time_zone": "Brasilia"
    },
    "locations": [],
    "current_user_likes_post": false,
    "body_cleaned": "<span><span>\n LIGHTTPD + SYMFONY \n<p><strong><span>Nota: Este artigo foi escrito em 2006, ele sera atualizado em breve.</span></strong></p>\n INSTALANDO PHP 5,FASTCGI, LIGHTTPD E SYMFONY FRAMEWORK \n OBJETIVO \n<p>No final das contas, ter o <a href=\"http://web.archive.org/web/20071223085206/http://www.symfony-project.com/\" rel=\"nofollow\">symfony</a> framework, instalado e funcionando. Para isso teremos a instalação do lighttpd na porta 81, compilação do PHP 5 direto dos fontes com bibliotecas gd e zlib incluidas, suporte a mysql, sqlite, e postgresql.</p>\n INSTALANDO O LIGHTTPD \n<p>Optei por instalar via apt-get( ahhh, esqueci de dizer que estou fazendo este tutorial no debian 3, kernel 2.6.17…), a principio o lighttpd funciona na porta 80, mas como a ideia é ser uma alternativa vamos instalar na porta 81, ou  outro que voce queira. Se voce ja tinha o Apache ( como previsto) e instalou via apt, ja tera um  erro ,  o httpd vai alegar que nao pode usar a porta 80, pois  obvio, ja esta em uso. Logo de um STOP no Apache.</p>\n<p><span> </span><span><span># apt-get install lighttpd</span></span></p>\n<p><span>Aqui ele instalou na porta 80, vamos mudar isso mais a frente.Ok!<br /></span><span> </span><span>Usuarios do slack ( esse esta em casa :-] ), fedora, e outros. Voces devem saber uma forma parecida de instalar, no slack uso o slackpkg, que é otimo, no fedora tem o rpm.<br />Bem, instalem o bem dito de alguma forma. :-]</span></p>\n <span><span>INSTALANDO DEPENDECIAS PARA COMPILAÇÃO DO PHP</span></span> \n<p>Quando formos compilar o PHP precisaremos  de alguns componentes instalados no sistema, entre eles, as bibliotecas, GD, PNG, Jpeg e etc. Eu, como voces ja sabem,  estou utilizando debian, então o que fiz? Ai esta.</p>\n<p><span># apt-get install libpng12-dev libgd-dev libpng12-dev libjpeg62-dev zlib1g-dev libmysql++-dev postgresql-dev libpq-dev libpq4 libxml2-dev</span><br /><br />Todos claro <span>dev, </span>ou seja pacote com os arquivos desenvolvimento (  tambem conhecidos como headers ).<br />NOTA: verifiquem em suas distribuições, mas no debian a libpq4, é referente ao Postgresql 8.x.x, e a libpq3 é referente ao ramo 7.x</p>\n<p>Obs: Essas foram as bibliotecas que eu precisei , voce pode precisar de  outras,  então, preste atenção nas mensagens do ./configur do PHP , ai voce instala as depencias não encontradas.</p>\n ALGUNS AJUSTES ANTES DE COMPILAR. \n<p>Vamos editar o lighttpd.conf, que no debian fica em /etc/lighttpd/</p>\n<p><span># vim /etc/lighttpd/lighttpd.conf<br /></span>Devera ter uma parte que seta o <span>server.port = 80 </span>, altere para 81, marromenos assim.<span><br />(…)<br />######### Options that are good to be but not neccesary to be changed #######</span></p>\n<p>## bind to port (default: 80)<br />server.port               = 81</p>\n<p>## bind to localhost only (default: all interfaces)<br />server.bind                = “localhost”<br /><span>(…)</span><br /><span><br /></span>Ok,  restart o light e inicie o apache. e verifique no seu navegador <a href=\"http://localhost\">http://localhost</a> (home do apache) e <a href=\"http://localhost:81\">http://localhost:81</a> ( Placeholder lighttpd).<br />A principio estamos aptos a instalar o PHP. Let’s go dude.</p>\n COMPILANDO O PHP 5 \n<p>RÁ… finalmente chegamos na parte divertida ( que nerd, não?) . 3 liçães basicas que aprendi na marra.</p>\n<ol>\n<li>Preste atenção nas mensagens.</li>\n<li>Preste MUITA atenção nas mensagens.</li>\n<li>Não se apavore com as mensagens.</li>\n</ol>\n<p>Depois dessas otimas lições, vamos ao trabalho.</p>\n Baixe a ultima versão do PHP5. \n<p>Entre em <a href=\"http://web.archive.org/web/20071223085206/http://br2.php.net/downloads.php\" rel=\"nofollow\">PHP Downloads</a> e baixe o tar.bz2 da versão estavel ( Complete Source Code).  PS.: <a href=\"http://web.archive.org/web/20071223085206/http://br2.php.net/get/php-5.1.4.tar.bz2/from/this/mirror\" rel=\"nofollow\">Link Direto para Versão 5.1.4</a></p>\n<p>Salve este arquivo no seu /tmp/</p>\n <span>Descompactar</span> \n<p><span># tar -jxvf php-5.1.4.tar.bz2<br /></span>Sera criada a pasta php-5.1.4 em /tmp,  ficando /tmp/php-5.1.4/<br /><span> </span><span><br /># cd /tmp/</span><span>php-5.1.4/</span></p>\n <span>Configurar  Compilação.</span> \n<p><span># ./configure –enable-fastcgi –with-gd –with-mysql –with-pgsql –with-zlib –with-pear=/opt/php5-cgi/pear –prefix=/opt/php5-cgi –with-libxml-dir=/usr/lib/<br /></span>Assim, pedimos que o bash <span>configure </span>habilite o modo <span>fastcgi ( </span><span>–enable-fastcgi</span><span>)</span>,  compile com <span>gd</span>,<span> mysql</span>,<span> postgresql </span>(<span> –with-pgsql </span>)<span> </span>e<span> zlib ( biblioteca de compressão </span>) ,<span> </span>o parametro <span>–with-pear=/opt/php5-cgi/pear </span>avisa para instalar o pear no diretorio especificado, <span>–prefix=/opt/php5-cgi </span>avisa em qual diretorio queremos a instalação do <span>PHP</span> e por ultimo informamos o caminho da <span>libxml</span> ( <span>–with-libxml-dir=/usr/lib/</span><span> </span>).<br />Ps.: Volto a repetir, neste ponto voces podem ter problema com dependencias, que tentamos suprir anteriormente, pode acontecer de a biblioteca que  o configure acusa não ter, estar presente, mas ele nao saber aonde, para isso informe a ele, como feito com a libxml, que passamos direto o local, no caso /usr/lib/.</p>\n <span>Make</span> \n<p>Se o ./configure tiver tido sucesso, compilamos e instalamos:<br /><span># make &amp;&amp; make install<br /></span>Agora, va tomar um café, jogar play2, liga pra mulher só pra dar um oi , pois o make leva em torno de 15 minutos para compilar tudo, o make install é rapido, coisa de 20 segundos e ela coloca as coisas no lugar.<span><br />( … ) after 15 minutes ( … )</span><br />Olha que beleza. temos tudo pronto. entre no diretorio de instalação, se tiver seguido a risca sera /opt/php5-cgi/, e de uma olhada.</p>\n CONFIGURANDO \n <span>PHP</span> \n<p>Entre no diretorio do PHP:<br /><span># /opt/php5-cgi</span></p>\n<p>Vamos agora copiar o php.ini<br /><span># cp /tmp/php-5.1.4/php.ini-dist /opt/php5-cgi/lib/php.ini</span></p>\n<p>E claro, vamos dar uma pequena arrumada para funcionar como symfony <span data-type=\"image\" data-full-url=\"http://blog.lucas-ts.com/wp-includes/images/smilies/icon_smile.gif\" data-gallery-id=\"10625009\" data-thumb-url=\"\" data-gallery-download=\"\" data-id=\"14862456\"></span><br /><span># vim /opt/php5-cgi/lib/php.ini<br /></span>Localize a variavel de configuração <span>magic_quotes_gpc </span>, que devera estar setada como On, altere para Off ficando assim:<br /><span>( … )</span><br /><span>; Magic quotes for incoming GET/POST/Cookie data.</span><br /><span>magic_quotes_gpc = Off</span><br /><span>( … )<br /></span>Aproveite e localize tambem a seção sobre session ( :-] ),  descomente a var de config <span>session.save_path </span>e sete ela para /tmp, ou um dir que o PHP tenha direito de escrita durante a execução.<br /><span>( … )</span><br />; where MODE is the octal representation of the mode. Note that this<br />; does not overwrite the process’s umask.<br />session.save_path = “/tmp”<br /><span>( … )</span></p>\n<p><span data-type=\"image\" data-full-url=\"http://blog.lucas-ts.com/wp-includes/images/smilies/icon_smile.gif\" data-gallery-id=\"10625009\" data-thumb-url=\"\" data-gallery-download=\"\" data-id=\"14862456\"></span> , PHP agora esta prontinho para rodar!</p>\n <span>lighttpd</span> \n<p>Entre no diretorio de configuração disponiveis.<br /><span># cd /etc/lighttpd/conf-available</span></p>\n<p>Edite o arquivo de configuração do fastcgi<br /><span># vim 10-fastcgi.conf</span></p>\n<p>Delete todo o conteudo original, e deixe assim<br />#*********************************************************************</p>\n<span>server.modules                += ( “mod_fastcgi” )</span><br /><br /><span>fastcgi.server =     ( “.php” =&gt;</span><br /><span>( “*” =&gt;</span><br /><span>( “socket” =&gt; “/tmp/php5-fcgi.socket”,</span><br /><span>“bin-path” =&gt; “/opt/php5-cgi/bin/php”</span><br /><span>)</span><br /><span>)</span><br /><span>)</span>\n<p>#*********************************************************************</p>\n<p>Após isso, habilite o modulo<br /><span># lighty-enable-mod fastcgi</span></p>\n<p>Opa, vamos dar um restart no lighttpd<br /><span># /etc/init.d/lighttpd restart</span></p>\n<p>Teste rapido, crie um arquivo /var/www/info.php ( estou assumindo que  o dir raiz seja /var/www/ )<span> </span>com o conteudo <span><?php phpinfo(); ?>, </span>abra o seu navegador e aponte para <a href=\"http://localhost:81/info.php\">http://localhost:81/info.php</a>, se ver aquela tradicional tela com as informações do PHP, e especificar a versão certinho com o fastcgi. otimo, realmente tudo saiu como esperado, se não, revise o passos.</p>\n GO SYMFONY, GO! \n<p>Vamos agora a instalação do symfony, que sera instalado via pear.</p>\n<p>Primeiro, vamos para o direitorio bin do php.<br /><span># cd /opt/php5-cgi/bin</span></p>\n<p>Agora, atualizamos o pear<br /><span># ./pear upgrade PEAR</span></p>\n<p>Beleza, hora de adicionarmos o canal do symfony, ahhh , precisa de conexão web é claro ( se estiver usando proxy, export http_proxy=”http://ip:porta” )<br /><span># ./pear channel-discover pear.symfony-project.com</span></p>\n<p>Finalmente instalamos o symfony, no caso o beta ( trunk/night-build)<br /><span># ./pear install symfony/symfony-beta</span></p>\n<p>Precisamos instalar tambem o Phing<br /># ./pear install <a href=\"http://phing.info/pear/phing-current.tgz\" rel=\"nofollow\">http://phing.info/pear/phing-current.tgz</a></p>\n<p>Ok, agora vamos corrigir um pequeno detalhe, caso voce tenha tambem outra versão do php instalada, trocaremos o executavel do php para o qual o symfony aponta.<br /><span># vim /opt/php5-cgi/bin/symfony<br /></span>Estando com o arquivo aberto, localize a linha:<br /><span>export PHP_COMMAND=php<br /></span>Altere para:<br /><span>export PHP_COMMAND=/opt/php5-cgi/bin/php</span></p>\n<p>Para finalizar criamos um link para o binario do symfony<br /><span># ln -s /opt/php5-cgi/bin/symfony /usr/bin/symfony</span></p>\n<p>Para testa, tecle no terminal<br /># symfony -T<br />Se aparecer uma lista de opções do symfony, ok, estamos indo bem.<br /><span><br /></span></p>\n SYMFONY AT LIGHTTPD \n<p>Pronto, temos tudo para funcionar, lighttpd instalado, php compilado e symfony instalado.</p>\n<p>Vamos criar uma pasta para nosso projeto symfony de teste<br /><span># mkdir /var/www/symfony-teste<br /># cd /var/www/symfony-teste</span></p>\n<p>Temos o diretorio, agora vamos criar a estrutura<br /><span># symfony new symfony-teste<br /></span>Verifique o diretorio ( <span>ls -la</span>) deve ter sido criada uma serie de diretorios ( app, lib, data, web, e etc.)</p>\n<p>Vamos criar um blog como aplicação teste<br /><span># symfony app blog</span></p>\n<p>E um modulo Teste<br />#symfony module blog Teste</p>\n<p>Vamos alterar o index padrao.<br /><span>#vim apps/blog/modules/Teste/templates/indexSuccess.php</span><br /><span> </span>Coloque qualquer codigo html , ou altere o que ja existe.</p>\n<p>Agora o teste final, abrar o navegador, e aponte para <a href=\"http://localhost:81/\">http://localhost:81/</a><br />ooopsss.<br />Nada? faltou alguma coisa?<br />Claro, precisamos avisar o lighttpd, para isso abra novamente o lighttpd.conf<br /><span># vim /etc/lighttpd/lighttpd.conf<br /></span>Localize a config <span>server.document-root </span>e altere do que estiver para<br /><span>server.document-root       = “/var/www/s</span><span>ymfony-teste</span><span>/web/”<br /></span><br />Após localize essa parte:</p>\n<span>$HTTP[“host”] == “localhost” {</span><br /><span>alias.url += (</span><br /><span>“/doc/” =&gt; “/usr/share/doc/”,</span><br /><span>“/images/” =&gt; “/usr/share/images/”</span><br /><span>)</span><br /><span>dir-listing.activate = “enable”</span><br /><span>}</span>\n<p>Troque para:</p>\n<span>$HTTP[“host”] == “localhost” {</span><br /><span>alias.url += (</span><br /><span>“/doc/” =&gt; “/usr/share/doc/”,</span><br /><span>“/images/” =&gt; “/usr/share/images/”,</span><br /><span>“/sf/” =&gt; “/opt/php5-cgi/pear/data/symfony/web/sf/”</span><br /><span>)</span><br /><span>dir-listing.activate = “enable”</span><br /><span>}</span>\n<p>Ou seja, incluimos na lista de alias a pasta do symfony.</p>\n<p>Agora sim, reinicie novamente o lighttpd, abra o navegador e aponte dessa vez para  <span><a href=\"http://localhost:81/blog_dev.php/Teste\">http://localhost:81/blog_dev.php/Teste</a> , </span>voce devera visualizar a rederização daquele arquivo que modificamos anteriormente.</p>\n CONCLUSÃO \n<p>Era isso pessoal, qualquer erro ou problema, me mandem um e-mail ( domluc at gmail dot com ), que responderei o mais rapido possivel.</p>\n TODO \n<ul>\n<li>Incluir Configuração do Rewrite Url no lighttpd</li>\n<li>Virtual Host para cada projeto</li>\n</ul>\n<span><br /></span>\n<p>Criado em 07/08/2006 por Lucas Stephanou<br />Ultima Alteração 08/08/2006</p>\n</span></span>",
    "allowed": true,
    "replies_count": 0,
    "scheduled": false,
    "id": 27819020,
    "short_url": "http://post.ly/2SnGv"
  }
]
